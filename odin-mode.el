(defvar odin-keywords nil  "All keywords of Odin.")
;;(defvar odin-operators nil  "All keywords of Odin.")
(defvar odin-types nil  "All keywords of Odin.")
(defvar odin-bufio nil "Standard Library Odin bufio.")
(defvar odin-bytes nil "Standard Library Odin bytes.")
(defvar odin-c nil "Standard Library Odin c.")
(defvar odin-frontend/preprocessor nil "Standard Library Odin frontend/preprocessor.")
(defvar odin-frontend/tokenizer nil "Standard Library Odin frontend/tokenizer.")
(defvar odin-libc nil "Standard Library Odin libc.")
(defvar odin-compress nil "Standard Library Odin compress.")
(defvar odin-gzip nil "Standard Library Odin gzip.")
(defvar odin-shoco nil "Standard Library Odin shoco.")
(defvar odin-zlib nil "Standard Library Odin zlib.")
(defvar odin-bitarray nil "Standard Library Odin bitarray.")
(defvar odin-lru nil "Standard Library Odin lru.")
(defvar odin-priority_queue nil "Standard Library Odin priority_queue.")
(defvar odin-queue nil "Standard Library Odin queue.")
(defvar odin-small_array nil "Standard Library Odin small_array.")
(defvar odin-dynlib nil "Standard Library Odin dynlib.")
(defvar odin-base32 nil "Standard Library Odin base32.")
(defvar odin-base64 nil "Standard Library Odin base64.")
(defvar odin-csv nil "Standard Library Odin csv.")
(defvar odin-entitiy nil "Standard Library Odin entitiy.")
(defvar odin-hxa nil "Standard Library Odin hxa.")
(defvar odin-json nil "Standard Library Odin json.")
(defvar odin-variant nil "Standard Library Odin variant.")
(defvar odin-xml nil "Standard Library Odin xml.")
(defvar odin-fmt nil "Standard Library Odin fmt.")
(defvar odin-hash nil "Standard Library Odin hash.")
(defvar odin-image nil "Standard Library Odin image.")
(defvar odin-netpbm nil "Standard Library Odin netpbm.")
(defvar odin-png nil "Standard Library Odin png.")
(defvar odin-tga nil "Standard Library Odin tga.")
(defvar odin-io nil "Standard Library Odin io.")
(defvar odin-log nil "Standard Library Odin log.")
(defvar odin-math nil "Standard Library Odin math.")
(defvar odin-big nil "Standard Library Odin big.")
(defvar odin-bits nil "Standard Library Odin bits.")
(defvar odin-fixed nil "Standard Library Odin fixed.")
(defvar odin-linalg nil "Standard Library Odin linalg.")
(defvar odin-linalg/glsl nil "Standard Library Odin linalg/glsl.")
(defvar odin-linalg/hlsl nil "Standard Library Odin linalg/hlsl.")
(defvar odin-rand nil "Standard Library Odin rand.")
(defvar odin-mem nil "Standard Library Odin mem.")
(defvar odin-virtual nil "Standard Library Odin virtual.")
(defvar odin-doc-format nil "Standard Library Odin doc-format.")
(defvar odin-os nil "Standard Library Odin os.")
(defvar odin-filepath nil "Standard Library Odin filepath.")
(defvar odin-slashpath nil "Standard Library Odin slashpath.")
(defvar odin-reflect nil "Standard Library Odin reflect.")
(defvar odin-runtime nil "Standard Library Odin runtime.")
(defvar odin-simd nil "Standard Library Odin simd.")
(defvar odin-slice nil "Standard Library Odin slice.")
(defvar odin-sort nil "Standard Library Odin sort.")
(defvar odin-strconv nil "Standard Library Odin strconv.")
(defvar odin-decimal nil "Standard Library Odin decimal.")
(defvar odin-strings nil "Standard Library Odin strings.")
(defvar odin-sync nil "Standard Library Odin sync.")
(defvar odin-testing nil "Standard Library Odin testing.")
(defvar odin-i18n nil "Standard Library Odin i18n.")
(defvar odin-scanner nil "Standard Library Odin scanner.")
(defvar odin-thread nil "Standard Library Odin thread.")
(defvar odin-time nil "Standard Library Odin time.")
(defvar odin-unicode nil "Standard Library Odin unicode.")
(defvar odin-utf16 nil "Standard Library Odin utf16.")
(defvar odin-utf8 nil "Standard Library Odin utf8.")
(defvar odin-utf/string nil "Standard Library Odin utf/string.")
(defvar odin-keywords nil  "All keywords of Odin.")
(defvar odin-operators nil  "All keywords of Odin.")
(defvar odin-types nil  "All keywords of Odin.")
(defvar odin-bufio-proc nil "Standard Library Odin bufio.")
(defvar odin-bufio-types nil "Standard Library Odin bufio.")
(defvar odin-bytes-proc nil "Standard Library Odin bytes.")
(defvar odin-bytes-types nil "Standard Library Odin bytes.")
(defvar odin-c-proc nil "Standard Library Odin c.")
(defvar odin-c-types nil "Standard Library Odin c.")
(defvar odin-frontend/preprocessor-proc nil "Standard Library Odin frontend/preprocessor.")
(defvar odin-frontend/preprocessor-types nil "Standard Library Odin frontend/preprocessor.")
(defvar odin-frontend/tokenizer-proc nil "Standard Library Odin frontend/tokenizer.")
(defvar odin-frontend/tokenizer-types nil "Standard Library Odin frontend/tokenizer.")
(defvar odin-libc-proc nil "Standard Library Odin libc.")
(defvar odin-libc-types nil "Standard Library Odin libc.")
(defvar odin-compress-proc nil "Standard Library Odin compress.")
(defvar odin-compress-types nil "Standard Library Odin compress.")
(defvar odin-gzip-proc nil "Standard Library Odin gzip.")
(defvar odin-gzip-types nil "Standard Library Odin gzip.")
(defvar odin-shoco-proc nil "Standard Library Odin shoco.")
(defvar odin-shoco-types nil "Standard Library Odin shoco.")
(defvar odin-zlib-proc nil "Standard Library Odin zlib.")
(defvar odin-zlib-types nil "Standard Library Odin zlib.")
(defvar odin-bitarray-proc nil "Standard Library Odin bitarray.")
(defvar odin-bitarray-types nil "Standard Library Odin bitarray.")
(defvar odin-lru-proc nil "Standard Library Odin lru.")
(defvar odin-lru-types nil "Standard Library Odin lru.")
(defvar odin-priority_queue-proc nil "Standard Library Odin priority_queue.")
(defvar odin-priority_queue-types nil "Standard Library Odin priority_queue.")
(defvar odin-queue-proc nil "Standard Library Odin queue.")
(defvar odin-queue-types nil "Standard Library Odin queue.")
(defvar odin-small_array-proc nil "Standard Library Odin small_array.")
(defvar odin-small_array-types nil "Standard Library Odin small_array.")
(defvar odin-dynlib-proc nil "Standard Library Odin dynlib.")
(defvar odin-dynlib-types nil "Standard Library Odin dynlib.")
(defvar odin-base32-proc nil "Standard Library Odin base32.")
(defvar odin-base32-types nil "Standard Library Odin base32.")
(defvar odin-base64-proc nil "Standard Library Odin base64.")
(defvar odin-base64-types nil "Standard Library Odin base64.")
(defvar odin-csv-proc nil "Standard Library Odin csv.")
(defvar odin-csv-types nil "Standard Library Odin csv.")
(defvar odin-entitiy-proc nil "Standard Library Odin entitiy.")
(defvar odin-entitiy-types nil "Standard Library Odin entitiy.")
(defvar odin-hxa-proc nil "Standard Library Odin hxa.")
(defvar odin-hxa-types nil "Standard Library Odin hxa.")
(defvar odin-json-proc nil "Standard Library Odin json.")
(defvar odin-json-types nil "Standard Library Odin json.")
(defvar odin-variant-proc nil "Standard Library Odin variant.")
(defvar odin-variant-types nil "Standard Library Odin variant.")
(defvar odin-xml-proc nil "Standard Library Odin xml.")
(defvar odin-xml-types nil "Standard Library Odin xml.")
(defvar odin-fmt-proc nil "Standard Library Odin fmt.")
(defvar odin-fmt-types nil "Standard Library Odin fmt.")
(defvar odin-hash-proc nil "Standard Library Odin hash.")
(defvar odin-hash-types nil "Standard Library Odin hash.")
(defvar odin-image-proc nil "Standard Library Odin image.")
(defvar odin-image-types nil "Standard Library Odin image.")
(defvar odin-netpbm-proc nil "Standard Library Odin netpbm.")
(defvar odin-netpbm-types nil "Standard Library Odin netpbm.")
(defvar odin-png-proc nil "Standard Library Odin png.")
(defvar odin-png-types nil "Standard Library Odin png.")
(defvar odin-tga-proc nil "Standard Library Odin tga.")
(defvar odin-tga-types nil "Standard Library Odin tga.")
(defvar odin-io-proc nil "Standard Library Odin io.")
(defvar odin-io-types nil "Standard Library Odin io.")
(defvar odin-log-proc nil "Standard Library Odin log.")
(defvar odin-log-types nil "Standard Library Odin log.")
(defvar odin-math-proc nil "Standard Library Odin math.")
(defvar odin-math-types nil "Standard Library Odin math.")
(defvar odin-big-proc nil "Standard Library Odin big.")
(defvar odin-big-types nil "Standard Library Odin big.")
(defvar odin-bits-proc nil "Standard Library Odin bits.")
(defvar odin-bits-types nil "Standard Library Odin bits.")
(defvar odin-fixed-proc nil "Standard Library Odin fixed.")
(defvar odin-fixed-types nil "Standard Library Odin fixed.")
(defvar odin-linalg-proc nil "Standard Library Odin linalg.")
(defvar odin-linalg-types nil "Standard Library Odin linalg.")
(defvar odin-linalg/glsl-proc nil "Standard Library Odin linalg/glsl.")
(defvar odin-linalg/glsl-types nil "Standard Library Odin linalg/glsl.")
(defvar odin-linalg/hlsl-proc nil "Standard Library Odin linalg/hlsl.")
(defvar odin-linalg/hlsl-types nil "Standard Library Odin linalg/hlsl.")
(defvar odin-rand-proc nil "Standard Library Odin rand.")
(defvar odin-rand-types nil "Standard Library Odin rand.")
(defvar odin-mem-proc nil "Standard Library Odin mem.")
(defvar odin-mem-types nil "Standard Library Odin mem.")
(defvar odin-virtual-proc nil "Standard Library Odin virtual.")
(defvar odin-virtual-types nil "Standard Library Odin virtual.")
(defvar odin-doc-format-proc nil "Standard Library Odin doc-format.")
(defvar odin-doc-format-types nil "Standard Library Odin doc-format.")
(defvar odin-os-proc nil "Standard Library Odin os.")
(defvar odin-os-types nil "Standard Library Odin os.")
(defvar odin-filepath-proc nil "Standard Library Odin filepath.")
(defvar odin-filepath-types nil "Standard Library Odin filepath.")
(defvar odin-slashpath-proc nil "Standard Library Odin slashpath.")
(defvar odin-slashpath-types nil "Standard Library Odin slashpath.")
(defvar odin-reflect-proc nil "Standard Library Odin reflect.")
(defvar odin-reflect-types nil "Standard Library Odin reflect.")
(defvar odin-runtime-proc nil "Standard Library Odin runtime.")
(defvar odin-runtime-types nil "Standard Library Odin runtime.")
(defvar odin-simd-proc nil "Standard Library Odin simd.")
(defvar odin-simd-types nil "Standard Library Odin simd.")
(defvar odin-slice-proc nil "Standard Library Odin slice.")
(defvar odin-slice-types nil "Standard Library Odin slice.")
(defvar odin-sort-proc nil "Standard Library Odin sort.")
(defvar odin-sort-types nil "Standard Library Odin sort.")
(defvar odin-strconv-proc nil "Standard Library Odin strconv.")
(defvar odin-strconv-types nil "Standard Library Odin strconv.")
(defvar odin-decimal-proc nil "Standard Library Odin decimal.")
(defvar odin-decimal-types nil "Standard Library Odin decimal.")
(defvar odin-strings-proc nil "Standard Library Odin strings.")
(defvar odin-strings-types nil "Standard Library Odin strings.")
(defvar odin-sync-proc nil "Standard Library Odin sync.")
(defvar odin-sync-types nil "Standard Library Odin sync.")
(defvar odin-testing-proc nil "Standard Library Odin testing.")
(defvar odin-testing-types nil "Standard Library Odin testing.")
(defvar odin-i18n-proc nil "Standard Library Odin i18n.")
(defvar odin-i18n-types nil "Standard Library Odin i18n.")
(defvar odin-scanner-proc nil "Standard Library Odin scanner.")
(defvar odin-scanner-types nil "Standard Library Odin scanner.")
(defvar odin-thread-proc nil "Standard Library Odin thread.")
(defvar odin-thread-types nil "Standard Library Odin thread.")
(defvar odin-time-proc nil "Standard Library Odin time.")
(defvar odin-time-types nil "Standard Library Odin time.")
(defvar odin-unicode-proc nil "Standard Library Odin unicode.")
(defvar odin-unicode-types nil "Standard Library Odin unicode.")
(defvar odin-utf16-proc nil "Standard Library Odin utf16.")
(defvar odin-utf16-types nil "Standard Library Odin utf16.")
(defvar odin-utf8-proc nil "Standard Library Odin utf8.")
(defvar odin-utf8-types nil "Standard Library Odin utf8.")
(defvar odin-utf/string-proc nil "Standard Library Odin utf/string.")
(defvar odin-utf/string-types nil "Standard Library Odin utf/string.")

(setq odin-keywords '("asm" "auto_cast" "bit_set" "break" "case" "cast" "context" "continue" "defer" "distinct" "do" "dynamic" "else" "enum" "fallthrough" "for" "foreign" "if" "import" " in " "map" "not_in" "or_else" "or_return" "package" "proc" "return" "struct" "switch" "transmute" "typeid" "union" "using" "when" "where" "main"))
(setq odin-types '("bool" "b8" "b16" "b32" "b64" "int" "i8" "i16" "i32" "i64" "i128" "uint" "u8" "u16" "u32" "u64" "u128" "uintptr" "i16le" "i32le" "i64le" "i128le" "u16le" "u32le" "u64le" "u128le" "i16be" "i32be" "i64be" "i128be" "u16be" "u32be" "u64be" "u128be" "f16" "f32" "f64" "f16le" "f32le" "f64le" "f16be" "f32be" "f64be" "complex32" "complex64" "complex128" "quaternion64" "quaternion128" "quaternion256" "rune" "string" "cstring" "rawptr" "typeid" "any"))
(setq odin-operators '("=" "!" "^" "?" ":" "+" "-" "*" "/" "%" "%%" "&" "|" "~" "&~" "<<" ">>" "&&" "||" "+=" "-=" "*=" "/=" "%=" "%%=" "&=" "|=" "~=" "&~=" "<<=" ">>=" "&&=" "||=" "->" "---" "==" "!=" "<" ">" "<=" ">=" "(" ")" "[" "]" "{" "}" ":" ".." "..=" "..<" "#" "@" "$" ";" "." "," "++" "--"))

(setq odin-bufio-types '("Loadahead_Reader" "Read_Writer" "Reader" "Scanner_Error" "Scanner_Extra_Error" "Scanner" "Split_Proc" "Writer"))
(setq odin-bufio-proc '( "bufio.lookahead_reader_buffer" "bufio.lookahead_reader_consume" "bufio.lookahead_reader_consume_all" "bufio.lookahead_reader_init" "bufio.lookahead_reader_peek" "bufio.lookahead_reader_peek_all" "bufio.read_writer_init" "bufio.read_writer_to_stream" "bufio.reader_buffered" "bufio.reader_destroy" "bufio.reader_discard" "bufio.reader_init" "bufio.reader_init_with_buf" "bufio.reader_peek" "bufio.reader_read_bytes" "bufio.reader_read_byte" "bufio.reader_read_rune" "bufio.reader_read" "bufio.reader_read_slice" "bufio.reader_read_string" "bufio.reader_reset" "bufio.reader_size" "bufio.reader_to_stream" "bufio.reader_unread_byte" "bufio.reader_unread_rune" "bufio.reader_write_to" "bufio.scan_bytes" "bufio.scan_lines" "bufio.scan_runes" "bufio.scan_words" "bufio.scanner_bytes" "bufio.scanner_destroy" "bufio.scanner_error" "bufio.scanner_init" "bufio.scanner_init_with_buffer" "bufio.scanner_scan" "bufio.scanner_text" "bufio.writer_available" "bufio.writer_buffered" "bufio.writer_destroy" "bufio.writer_flush" "bufio.writer_init" "bufio.writer_init_with_buf" "bufio.writer_read_from" "bufio.writer_reset" "bufio.writer_size" "bufio.writer_to_stream" "bufio.writer_write" "bufio.writer_write_byte" "bufio.writer_write_rune" "bufio.writer_write_string"))

(setq odin-bytes-types '("Buffer" "Reader"))
(setq odin-bytes-proc '( "bytes.buffer_capacity" "bytes.buffer_destroy" "bytes.buffer_grow" "bytes.buffer_init_string" "bytes.buffer_init" "bytes.buffer_init_allocator" "bytes.buffer_is_empty" "bytes.buffer_length" "bytes.buffer_next" "bytes.buffer_read" "bytes.buffer_read_string" "bytes.buffer_read_from" "bytes.buffer_read_bytes" "bytes.buffer_read_rune" "bytes.buffer_read_at" "bytes.buffer_read_byte" "bytes.buffer_reset" "bytes.buffer_to_bytes" "bytes.buffer_to_stream" "bytes.buffer_to_string" "bytes.buffer_truncate" "bytes.buffer_unread_byte" "bytes.buffer_unread_rune" "bytes.buffer_write_at" "bytes.buffer_write_byte" "bytes.buffer_write_rune" "bytes.buffer_write_to" "bytes.buffer_write" "bytes.buffer_write_string" "bytes.center_justify" "bytes.centre_justify" "bytes.clone_safe" "bytes.clone" "bytes.compare" "bytes.concatenate" "bytes.concatenate_safe" "bytes.contains" "bytes.contains_any" "bytes.contains_rune" "bytes.count" "bytes.equal_fold" "bytes.equal" "bytes.expand_tabs" "bytes.fields" "bytes.fields_proc" "bytes.has_prefix" "bytes.has_suffix" "bytes.index" "bytes.index_any" "bytes.index_rune" "bytes.index_byte" "bytes.index_proc" "bytes.index_proc_with_state" "bytes.is_ascii_space" "bytes.is_in_cutset" "bytes.is_null" "bytes.is_space" "bytes.join_safe" "bytes.join" "bytes.last_index_any" "bytes.last_index_byte" "bytes.last_index_proc" "bytes.last_index_proc_with_state" "bytes.last_index" "bytes.left_justify" "bytes.partition" "bytes.ptr_from_bytes" "bytes.ptr_from_slice" "bytes.reader_init" "bytes.reader_length" "bytes.reader_read" "bytes.reader_read_rune" "bytes.reader_read_at" "bytes.reader_read_byte" "bytes.reader_seek" "bytes.reader_size" "bytes.reader_to_stream" "bytes.reader_unread_byte" "bytes.reader_unread_rune" "bytes.reader_write_to" "bytes.remove" "bytes.remove_all" "bytes.repeat" "bytes.replace" "bytes.replace_all" "bytes.reverse" "bytes.right_justify" "bytes.rune_count" "bytes.scrub" "bytes.split_after" "bytes.split_after_iterator" "bytes.split_after_n" "bytes.split" "bytes.split_iterator" "bytes.split_multi_iterator" "bytes.split_multi" "bytes.split_n" "bytes.trim_left_null" "bytes.trim_left_proc_with_state" "bytes.trim_left" "bytes.trim" "bytes.trim_left_proc" "bytes.trim_left_space" "bytes.trim_null" "bytes.trim_prefix" "bytes.trim_right_null" "bytes.trim_right_proc" "bytes.trim_right" "bytes.trim_right_proc_with_state" "bytes.trim_right_space" "bytes.trim_space" "bytes.trim_suffix" "bytes.truncate_to_byte" "bytes.truncate_to_rune"))

(setq odin-c-types '("bool" "char" "complex_double" "complex_float" "double" "float" "int16_t" "int32_t" "int64_t" "int_fast16_t" "int_fast32_t" "int" "int8_t" "int_fast64_t" "int_fast8_t" "int_least16_t" "int_least32_t" "int_least64_t" "int_least8_t" "intmax_t" "intptr_t" "longlong" "long" "ptrdiff_t" "schar" "short" "size_t" "ssize_t" "uchar" "uint16_t" "uint" "uint32_t" "uint64_t" "uint8_t" "uint_fast16_t" "uint_fast32_t" "uint_fast64_t" "uint_fast8_t" "uint_least16_t" "uint_least32_t" "uint_least64_t" "uint_least8_t" "uintmax_t" "uintptr_t" "ulonglong" "ulong" "ushort" "wchar_t"))

(setq odin-frontend/preprocesso-types '("Cond_Incl_State" "Cond_Incl" "Error_Handler" "Macro_Arg" "Macro_Handler" "Macro_Kind" "Macro" "Macro_Param" "Pragma_Handler" "Preprocessor"))

(setq odin-frontend/preprocessor-proc '( "frontend/preprocessor.add_builtin" "frontend/preprocessor.add_macro" "frontend/preprocessor.append_token" "frontend/preprocessor.check_for_include_guard" "frontend/preprocessor.const_expr" "frontend/preprocessor.consume" "frontend/preprocessor.convert_pp_char" "frontend/preprocessor.convert_pp_number" "frontend/preprocessor.convert_pp_string" "frontend/preprocessor.convert_pp_tokens" "frontend/preprocessor.convert_pp_token" "frontend/preprocessor.copy_line" "frontend/preprocessor.counter_macro" "frontend/preprocessor.define_macro" "frontend/preprocessor.error" "frontend/preprocessor.eval_const_expr" "frontend/preprocessor.expand_macro" "frontend/preprocessor.file_macro" "frontend/preprocessor.find_arg" "frontend/preprocessor.find_macro" "frontend/preprocessor.from_hex" "frontend/preprocessor.has_varargs" "frontend/preprocessor.include_file" "frontend/preprocessor.init_default_macros" "frontend/preprocessor.init_defaults" "frontend/preprocessor.init_lookup_tables" "frontend/preprocessor.is_hash" "frontend/preprocessor.is_hex_digit" "frontend/preprocessor.join_adjacent_string_literals" "frontend/preprocessor.join_tokens" "frontend/preprocessor.line_macro" "frontend/preprocessor.new_number_token" "frontend/preprocessor.new_string_token" "frontend/preprocessor.paste" "frontend/preprocessor.preprocess" "frontend/preprocessor.preprocess_internal" "frontend/preprocessor.push_cond_incl" "frontend/preprocessor.quote_string" "frontend/preprocessor.read_const_expr" "frontend/preprocessor.read_include_filename" "frontend/preprocessor.read_line_marker" "frontend/preprocessor.read_macro_arg_one" "frontend/preprocessor.read_macro_args" "frontend/preprocessor.read_macro_definition" "frontend/preprocessor.read_macro_params" "frontend/preprocessor.search_include_next" "frontend/preprocessor.search_include_paths" "frontend/preprocessor.skip" "frontend/preprocessor.skip_cond_incl" "frontend/preprocessor.skip_line" "frontend/preprocessor.stringize" "frontend/preprocessor.substitute_token" "frontend/preprocessor.undef_macro" "frontend/preprocessor.unquote_char" "frontend/preprocessor.unquote_string" "frontend/preprocessor.warn" "frontend/preprocessor.wide_char_size" ))

(setq odin-frontend/tokenizer-types '("Error_Handler" "File" "Hide_Set" "Is_Keyword_Proc" "Pos" "Token_Type_Hint" "Token_Value" "Token" "Token_Kind" "Tokenizer"))

(setq odin-frontend/tokenizer-proc '( "frontend/tokenizer.add_hide_set" "frontend/tokenizer.add_new_file" "frontend/tokenizer.advance_rune" "frontend/tokenizer.advance_rune_n" "frontend/tokenizer.allow_next_to_be_newline" "frontend/tokenizer.char_width" "frontend/tokenizer.copy_token" "frontend/tokenizer.default_error_handler" "frontend/tokenizer.default_is_keyword" "frontend/tokenizer.default_warn_handler" "frontend/tokenizer.digit_val" "frontend/tokenizer.display_width" "frontend/tokenizer.error" "frontend/tokenizer.error_offset" "frontend/tokenizer.hide_set_contains" "frontend/tokenizer.hide_set_intersection" "frontend/tokenizer.hide_set_union" "frontend/tokenizer.in_range" "frontend/tokenizer.init_defaults" "frontend/tokenizer.inline_tokenize" "frontend/tokenizer.is_digit" "frontend/tokenizer.is_ident0" "frontend/tokenizer.is_ident1" "frontend/tokenizer.new_eof" "frontend/tokenizer.new_hide_set" "frontend/tokenizer.peek" "frontend/tokenizer.peek_str" "frontend/tokenizer.scan_comment" "frontend/tokenizer.scan_escape" "frontend/tokenizer.scan_identifier" "frontend/tokenizer.scan_literal_prefix" "frontend/tokenizer.scan" "frontend/tokenizer.scan_number" "frontend/tokenizer.scan_punct" "frontend/tokenizer.scan_rune" "frontend/tokenizer.scan_string" "frontend/tokenizer.skip_whitespace" "frontend/tokenizer.tokenize_file" "frontend/tokenizer.tokenize" "frontend/tokenizer.warn" "frontend/tokenizer.warn_offset"))

(setq odin-libc-types' (  "FILE" "atomic_bool" "atomic_char16_t" "atomic_char" "atomic_char32_t" "atomic_flag" "atomic_int_fast16_t" "atomic_int_fast32_t" "atomic_int_fast64_t" "atomic_int_fast8_t" "atomic_int_least16_t" "atomic_int_least32_t" "atomic_int" "atomic_int_least64_t" "atomic_int_least8_t" "atomic_intmax_t" "atomic_intptr_t" "atomic_llong" "atomic_long" "atomic_ptrdiff_t" "atomic_schar" "atomic_short" "atomic_size_t" "atomic_uchar" "atomic_uint_fast16_t" "atomic_uint_fast32_t" "atomic_uint_fast64_t" "atomic_uint_fast8_t" "atomic_uint_least16_t" "atomic_uint" "atomic_uint_least32_t" "atomic_uint_least64_t" "atomic_uint_least8_t" "atomic_uintmax_t" "atomic_uintptr_t" "atomic_ullong" "atomic_ulong" "atomic_ushort" "atomic_wchar_t" "bool" "char16_t" "char32_t" "char" "clock_t" "cnd_t" "complex_double" "complex_float" "div_t" "double_t" "double" "float" "float_t" "fpos_t" "int" "int16_t" "int32_t" "int64_t" "int8_t" "int_fast16_t" "int_fast32_t" "int_fast64_t" "int_fast8_t" "int_least16_t" "int_least32_t" "int_least64_t" "int_least8_t" "intmax_t" "intptr_t" "jmp_buf" "ldiv_t" "lldiv_t" "long" "longlong" "mbstate_t" "memory_order" "mtx_t" "once_flag" "ptrdiff_t" "schar" "short" "sig_atomic_t" "size_t" "ssize_t" "thrd_start_t" "thrd_t" "time_t" "timespec" "tm" "tss_dtor_t" "tss_t" "uchar" "uint" "uint16_t" "uint32_t" "uint64_t" "uint8_t" "uint_fast16_t" "uint_fast32_t" "uint_fast64_t" "uint_fast8_t" "uint_least16_t" "uint_least32_t" "uint_least64_t" "uint_least8_t" "uintmax_t" "uintptr_t" "ulonglong" "ulong" "ushort" "va_list" "wchar_t" "wctrans_t" "wctype_t" "wint_t"))

  (setq odin-libc-proc '( "libc.ATOMIC_VAR_INIT" "libc.CMPLXF" "libc.CMPLX" "libc.MB_CUR_MAX" "libc.abort" "libc.abs" "libc.aligned_alloc" "libc.asctime" "libc.at_quick_exit" "libc.atexit" "libc.atof" "libc.atoi" "libc.atoll" "libc.atol" "libc.atomic_compare_exchange_strong_explicit" "libc.atomic_compare_exchange_strong" "libc.atomic_compare_exchange_weak_explicit" "libc.atomic_compare_exchange_weak" "libc.atomic_exchange" "libc.atomic_exchange_explicit" "libc.atomic_fetch_add_explicit" "libc.atomic_fetch_add" "libc.atomic_fetch_and" "libc.atomic_fetch_and_explicit" "libc.atomic_fetch_or_explicit" "libc.atomic_fetch_or" "libc.atomic_fetch_sub" "libc.atomic_fetch_sub_explicit" "libc.atomic_fetch_xor" "libc.atomic_fetch_xor_explicit" "libc.atomic_flag_clear_explicit" "libc.atomic_flag_clear" "libc.atomic_flag_test_and_set" "libc.atomic_flag_test_and_set_explicit" "libc.atomic_init" "libc.atomic_is_lock_free" "libc.atomic_load_explicit" "libc.atomic_load" "libc.atomic_signal_fence" "libc.atomic_store" "libc.atomic_store_explicit" "libc.atomic_thread_fence" "libc.bsearch" "libc.btowc" "libc.c16rtomb" "libc.c32rtomb" "libc.cabsf" "libc.cabs" "libc.cacosf" "libc.cacoshf" "libc.cacosh" "libc.cacos" "libc.call_once" "libc.calloc" "libc.carg" "libc.cargf" "libc.casinf" "libc.casinhf" "libc.casin" "libc.casinh" "libc.catanf" "libc.catanhf" "libc.catanh" "libc.catan" "libc.ccosf" "libc.ccoshf" "libc.ccosh" "libc.ccos" "libc.cexpf" "libc.cexp" "libc.cimagf" "libc.cimag" "libc.clearerr" "libc.clock" "libc.clog" "libc.clogf" "libc.cnd_broadcast" "libc.cnd_destroy" "libc.cnd_init" "libc.cnd_signal" "libc.cnd_timedwait" "libc.cnd_wait" "libc.conj" "libc.conjf" "libc.cpow" "libc.cpowf" "libc.cprojf" "libc.cproj" "libc.creal" "libc.crealf" "libc.csinhf" "libc.csinh" "libc.csin" "libc.csinf" "libc.csqrt" "libc.csqrtf" "libc.ctanf" "libc.ctan" "libc.ctanh" "libc.ctanhf" "libc.ctime" "libc.difftime" "libc.div" "libc.errno" "libc.exit" "libc.fclose" "libc.feof" "libc.ferror" "libc.fflush" "libc.fgetc" "libc.fgetpos" "libc.fgets" "libc.fgetws" "libc.fopen" "libc.fprintf" "libc.fputc" "libc.fputwc" "libc.fputws" "libc.fread" "libc.free" "libc.freopen" "libc.fscanf" "libc.fseek" "libc.fsetpos" "libc.ftell" "libc.fwgetc" "libc.fwide" "libc.fwprintf" "libc.fwrite" "libc.fwscanf" "libc.getchar" "libc.getc" "libc.getenv" "libc.getwchar" "libc.getwc" "libc.gmtime" "libc.isalnum" "libc.isalpha" "libc.isblank" "libc.iscntrl" "libc.isdigit" "libc.isfinite" "libc.isgraph" "libc.isgreater" "libc.isgreaterequal" "libc.isinf" "libc.isless" "libc.islessequal" "libc.islessgreater" "libc.islower" "libc.isnan" "libc.isnormal" "libc.isprint" "libc.ispunct" "libc.isspace" "libc.isunordered" "libc.isupper" "libc.iswalnum" "libc.iswalpha" "libc.iswblank" "libc.iswcntrl" "libc.iswctype" "libc.iswdigit" "libc.iswgraph" "libc.iswlower" "libc.iswprint" "libc.iswpunct" "libc.iswspace" "libc.iswupper" "libc.iswxdigit" "libc.isxdigit" "libc.kill_dependency" "libc.labs" "libc.ldiv" "libc.llabs" "libc.lldiv" "libc.localtime" "libc.longjmp" "libc.malloc" "libc.mblen" "libc.mbrlen" "libc.mbrtoc16" "libc.mbrtoc32" "libc.mbrtowc" "libc.mbsinit" "libc.mbsrtowcs" "libc.mbstowcs" "libc.mbtowc" "libc.memchr" "libc.memcmp" "libc.memcpy" "libc.memmove" "libc.memset" "libc.mktime" "libc.mtx_destroy" "libc.mtx_init" "libc.mtx_lock" "libc.mtx_timedlock" "libc.mtx_trylock" "libc.mtx_unlock" "libc.perror" "libc.printf" "libc.putc" "libc.putchar" "libc.puts" "libc.putwc" "libc.putwchar" "libc.qsort" "libc.quick_exit" "libc.raise" "libc.rand" "libc.realloc" "libc.remove" "libc.rename" "libc.rewind" "libc.scanf" "libc.setbuf" "libc.setjmp" "libc.setvbuf" "libc.signal" "libc.snprintf" "libc.srand" "libc.sscanf" "libc.strcat" "libc.strchr" "libc.strcmp" "libc.strcoll" "libc.strcpn" "libc.strcpy" "libc.strcspn" "libc.strerror" "libc.strftime" "libc.strlen" "libc.strncat" "libc.strncmp" "libc.strncpy" "libc.strpbrk" "libc.strrchr" "libc.strtod" "libc.strtof" "libc.strtok" "libc.strtol" "libc.strtoll" "libc.strtoul" "libc.strtoull" "libc.strxfrm" "libc.swprintf" "libc.swscanf" "libc.system" "libc.thrd_create" "libc.thrd_current" "libc.thrd_detach" "libc.thrd_equal" "libc.thrd_exit" "libc.thrd_join" "libc.thrd_sleep" "libc.thrd_yield" "libc.timespec_get" "libc.time" "libc.tmpfile" "libc.tmpnam" "libc.tolower" "libc.toupper" "libc.towctrans" "libc.towlower" "libc.towupper" "libc.tss_create" "libc.tss_delete" "libc.tss_get" "libc.tss_set" "libc.ungetc" "libc.ungetwc" "libc.va_copy" "libc.va_end" "libc.va_start" "libc.vfprintf" "libc.vfscanf" "libc.vfwprintf" "libc.vfwscanf" "libc.vprintf" "libc.vscanf" "libc.vsnprintf" "libc.vsprintf" "libc.vsscanf" "libc.vswprintf" "libc.vswscanf" "libc.vwprintf" "libc.vwscanf" "libc.wcrtomb" "libc.wcscat" "libc.wcschr" "libc.wcscmp" "libc.wcscoll" "libc.wcscpy" "libc.wcscspn" "libc.wcsftime" "libc.wcslen" "libc.wcsncat" "libc.wcsncmp" "libc.wcsncpy" "libc.wcspbrk" "libc.wcsrchr" "libc.wcsrtombs" "libc.wcsspn" "libc.wcsstr" "libc.wcstod" "libc.wcstof" "libc.wcstok" "libc.wcstoll" "libc.wcstol" "libc.wcstombs" "libc.wcstoull" "libc.wcstoul" "libc.wcsxfrm" "libc.wctob" "libc.wctomb" "libc.wctrans" "libc.wctype" "libc.wmemchr" "libc.wmemcmp" "libc.wmemcpy" "libc.wmemmove" "libc.wmemset" "libc.wprintf" "libc.wscanf" "libc.acosh" "libc.acoshf" "libc.acos" "libc.acosf" "libc.asin" "libc.asinf" "libc.asinhf" "libc.asinh" "libc.atan" "libc.atan2f" "libc.atan2" "libc.atanf" "libc.atanh" "libc.atanhf" "libc.cbrt" "libc.cbrtf" "libc.ceil" "libc.ceilf" "libc.copysign" "libc.copysignf" "libc.cosf" "libc.cosh" "libc.cos" "libc.coshf" "libc.erf" "libc.erfcf" "libc.erfc" "libc.erff" "libc.exp2f" "libc.expf" "libc.exp" "libc.exp2" "libc.expm1f" "libc.expm1" "libc.fabsf" "libc.fabs" "libc.fdimf" "libc.fdim" "libc.floor" "libc.floorf" "libc.fmaf" "libc.fmax" "libc.fmaxf" "libc.fma" "libc.fminf" "libc.fmin" "libc.fmodf" "libc.fmod" "libc.fpclassify" "libc.frexpf" "libc.frexp" "libc.hypotf" "libc.hypot" "libc.ilogb" "libc.ilogbf" "libc.ldexpf" "libc.ldexp" "libc.lgamma" "libc.lgammaf" "libc.llrintf" "libc.llrint" "libc.llroundf" "libc.llround" "libc.log" "libc.log10f" "libc.log10" "libc.log1pf" "libc.log1p" "libc.log2" "libc.log2f" "libc.logb" "libc.logbf" "libc.logf" "libc.lrint" "libc.lrintf" "libc.lroundf" "libc.lround" "libc.modf" "libc.modff" "libc.nan" "libc.nanf" "libc.nearbyint" "libc.nearbyintf" "libc.nextafterf" "libc.nextafter" "libc.powf" "libc.pow" "libc.remainderf" "libc.remainder" "libc.remquof" "libc.remquo" "libc.rint" "libc.rintf" "libc.roundf" "libc.round" "libc.scalblnf" "libc.scalbln" "libc.scalbnf" "libc.scalbn" "libc.signbit" "libc.sinf" "libc.sinh" "libc.sinhf" "libc.sin" "libc.sqrt" "libc.sqrtf" "libc.tanf" "libc.tanhf" "libc.tanh" "libc.tan" "libc.tgamma" "libc.tgammaf" "libc.truncf" "libc.trunc"))

(setq odin-compress-types '(  "Context_Memory_Input" "Context_Stream_Input" "Deflate_Error" "Error" "GZIP_Error" "General_Error" "ZIP_Error" "ZLIB_Error"))

  (setq odin-compress-proc '( "compress.consume_bits_lsb_from_memory" "compress.consume_bits_lsb_from_stream" "compress.discard_to_next_byte_lsb_from_memory" "compress.discard_to_next_byte_lsb_from_stream" "compress.input_size_from_memory" "compress.input_size_from_stream" "compress.peek_back_byte" "compress.peek_bits_lsb_from_memory" "compress.peek_bits_lsb_from_stream" "compress.peek_bits_no_refill_lsb_from_memory" "compress.peek_bits_no_refill_lsb_from_stream" "compress.peek_data_from_memory" "compress.peek_data_from_stream" "compress.read_bits_lsb_from_memory" "compress.read_bits_lsb_from_stream" "compress.read_bits_no_refill_lsb_from_memory" "compress.read_bits_no_refill_lsb_from_stream" "compress.read_data" "compress.read_slice_from_memory" "compress.read_slice_from_stream" "compress.read_u8_from_memory" "compress.read_u8_from_stream" "compress.read_u8_prefer_code_buffer_lsb" "compress.refill_lsb_from_memory" "compress.refill_lsb_from_stream" "compress.consume_bits_lsb" "compress.discard_to_next_byte_lsb" "compress.input_size" "compress.peek_bits_lsb" "compress.peek_bits_no_refill_lsb" "compress.peek_data" "compress.read_bits_lsb" "compress.read_bits_no_refill_lsb" "compress.read_slice" "compress.read_u8" "compress.refill_lsb"))

(setq odin-gzip-types '(  "Compression_Flags" "Compression" "E_Deflate" "E_GZIP" "E_General" "E_ZLIB" "Error" "Header" "Header_Flag" "Header_Flags" "Magic" "OS"))

  (setq odin-gzip-proc '( "gzip.load_from_bytes" "gzip.load_from_context" "gzip.load_from_file" "gzip.main" "gzip.load"))

(setq odin-o-types '(  "Shoco_Model" "Shoco_pack"))

  (setq odin-shoco-proc '( "shoco.compress_bound" "shoco.compress_string" "shoco.compress_string_to_buffer" "shoco.decompress_bound" "shoco.decompress_slice_to_output_buffer" "shoco.decompress_slice_to_string" "shoco.find_best_encoding" "shoco.validate_model" "shoco.compress" "shoco.decompress"))

(setq odin-zlib-types '(  "Compression_Level" "Compression_Method" "Deflate_Error" "Error" "General_Error" "Huffman_Table" "Options" "ZLIB_Error"))

  (setq idub-zlib-types '( "zlib.allocate_huffman_table" "zlib.build_huffman" "zlib.decode_huffman" "zlib.decode_huffman_slowpath" "zlib.grow_buffer" "zlib.inflate_from_byte_array" "zlib.inflate_from_byte_array_raw" "zlib.inflate_from_context" "zlib.inflate_raw" "zlib.main" "zlib.parse_huffman_block" "zlib.repl_bytes" "zlib.repl_byte" "zlib.write_byte" "zlib.z_bit_reverse"))

(setq odin-bit_array-types '(  "Bit_Array" "Bit_Array_Iterator"))

  (setq odin-bit_array-proc '( "bit_array.clear" "bit_array.create" "bit_array.destroy" "bit_array.get" "bit_array.iterate_by_all" "bit_array.iterate_by_set" "bit_array.iterate_by_unset" "bit_array.make_iterator" "bit_array.set"))

(setq odin-lru-types '(  "Cache" "Node"))
  
  (setq odin-lru-proc '( "lru.clear" "lru.destroy" "lru.exists" "lru.get" "lru.get_ptr" "lru.init" "lru.peek" "lru.remove" "lru.set"))

(setq odin-priority_queue-types '( "Priority_Queue"))

 (setq odin-priority_queue-proc '( "priority_queue.cap" "priority_queue.clear" "priority_queue.default_swap_proc" "priority_queue.destroy" "priority_queue.fix" "priority_queue.init" "priority_queue.init_from_dynamic_array" "priority_queue.len" "priority_queue.pop" "priority_queue.pop_safe" "priority_queue.push" "priority_queue.remove" "priority_queue.reserve"))

(setq odin-queue-types '( "Queue"))

 (setq odin-queue-proc '( "queue.append_elems" "queue.append_elem" "queue.cap" "queue.clear" "queue.consume_back" "queue.consume_front" "queue.destroy" "queue.get" "queue.get_ptr" "queue.init_from_slice" "queue.init" "queue.len" "queue.pop_back" "queue.pop_back_safe" "queue.pop_front_safe" "queue.pop_front" "queue.push_back" "queue.push_back_elems" "queue.push_front" "queue.reserve" "queue.set" "queue.space" "queue.append" "queue.push"))

(setq odin-small_array-types '( "Small_Array"))

 (setq odin-small_array-proc '( "small_array.append_elems" "small_array.append_elem" "small_array.cap" "small_array.clear" "small_array.consume" "small_array.get" "small_array.get_ptr" "small_array.len" "small_array.pop_back" "small_array.pop_back_safe" "small_array.pop_front" "small_array.pop_front_safe" "small_array.push_back" "small_array.push_back_elems" "small_array.push_front" "small_array.resize" "small_array.set" "small_array.slice" "small_array.space" "small_array.append" "small_array.push"))

(setq odin-dynlib-types '( "Library"))

 (setq odin-dynlib-proc '( "dynlib.load_library" "dynlib.symbol_address" "dynlib.unload_library"))

(setq odin-base32 '( "encode" "decode"))

(setq odin-base64-types '( "encode" "decode"))

(setq odin-csv-types '( "Error" "Reader" "Reader_Error_Kind" "Reader_Error" "Writer"))

 (setq odin-csv-proc '( "csv.is_io_error" "csv.read_all_from_string" "csv.read_from_string" "csv.reader_destroy" "csv.read" "csv.read_all" "csv.reader_init" "csv.reader_init_with_string" "csv.writer_init" "csv.write" "csv.write_all" "csv.writer_flush"))

(setq odin-entity-types '( "Error" "Tokenizer" "XML_Decode_Option" "XML_Decode_Options"))

 (setq odin-entity-proc '( "entity.advance" "entity.decode_xml" "entity.named_xml_entity_to_rune" "entity.xml_decode_entity"))

(setq odin-hxa-types '(  "File" "Header" "Image_Type" "Layer_Data_Type" "Layer_Stack" "Layer" "Meta" "Meta_Value_Type" "Node_Geometry" "Node_Image" "Node_Index" "Node_Type" "Node" "Read_Error" "Write_Error"))

(setq odin-hxa-proc '( "hxa.file_destroy" "hxa.meta_destroy" "hxa.nodes_destroy" "hxa.read_from_file" "hxa.read" "hxa.required_write_size" "hxa.write_to_file" "hxa.write"))

(setq odin-json-types '( "Array" "Boolean" "Error" "Float" "Integer" "Marshal_Data_Error" "Marshal_Error" "Null" "Object" "Parser" "Pos" "Specification" "String" "Token_Kind" "Tokenizer" "Token" "Unmarshal_Data_Error" "Unmarshal_Error" "Unsupported_Type_Error" "Value"))

 (setq odin-json-proc '( "json.advance_token" "json.allow_token" "json.clone_string" "json.destroy_value" "json.expect_token" "json.get_token" "json.is_valid_string_literal" "json.is_valid" "json.is_valid_number" "json.make_parser" "json.make_parser_from_string" "json.make_tokenizer" "json.marshal_to_builder" "json.marshal_to_writer" "json.marshal" "json.next_rune" "json.parse_comma" "json.parse" "json.parse_array" "json.parse_colon" "json.parse_object" "json.parse_object_body" "json.parse_object_key" "json.parse_string" "json.parse_value" "json.token_end_pos" "json.unmarshal_any" "json.unmarshal" "json.unmarshal_string" "json.unquote_string" "json.validate_array" "json.validate_object_body" "json.validate_object_key" "json.validate_object" "json.validate_value"))

(setq odin-varint-types '( "Eorror"))

 (setq odin-varint-proc '( "varint.decode_ileb128_buffer" "varint.decode_ileb128_byte" "varint.decode_uleb128_buffer" "varint.decode_uleb128_byte" "varint.encode_ileb128" "varint.encode_uleb128" "varint.decode_ileb128" "varint.decode_uleb128" "varint."))

(setq odin-xml-types '( "Attributes" "Attribute" "Document" "Element" "Element_ID" "Encoding" "Error" "Error_Handler" "Option_Flag" "Option_Flags" "Options" "Pos" "Token" "Token_Kind" "Tokenizer"))

 (setq odin-xml-proc '( "xml.advance_rune" "xml.check_duplicate_attributes" "xml.default_error_handler" "xml.destroy" "xml.error" "xml.expect" "xml.find_attribute_val_by_key" "xml.find_child_by_ident" "xml.init" "xml.is_letter" "xml.is_valid_identifier_rune" "xml.likely" "xml.load_from_file" "xml.new_element" "xml.parse_attributes" "xml.parse_attribute" "xml.parse_bytes" "xml.parse_doctype" "xml.parse_prologue" "xml.parse_string" "xml.peek_byte" "xml.peek" "xml.print_element" "xml.print" "xml.scan" "xml.scan_comment" "xml.scan_identifier" "xml.scan_string" "xml.skip_cdata" "xml.skip_element" "xml.skip_whitespace" "xml.validate_options" "xml.parse"))

(setq odin-fmt-types '( "Info" "Register_User_Formatter_Error" "User_Formatter"))

 (setq odin-fmt-proc '( "fmt.aprint" "fmt.aprintf" "fmt.aprintln" "fmt.assertf" "fmt.bprint" "fmt.bprintf" "fmt.bprintln" "fmt.enum_value_to_string" "fmt.eprint" "fmt.eprintf" "fmt.eprintln" "fmt.fmt_arg" "fmt.fmt_bad_verb" "fmt.fmt_bit_set" "fmt.fmt_bool" "fmt.fmt_complex" "fmt.fmt_cstring" "fmt.fmt_enum" "fmt.fmt_float" "fmt.fmt_int_128" "fmt.fmt_int" "fmt.fmt_pointer" "fmt.fmt_quaternion" "fmt.fmt_rune" "fmt.fmt_string" "fmt.fmt_value" "fmt.fmt_write_array" "fmt.fmt_write_indent" "fmt.fmt_write_padding" "fmt.fprint_type" "fmt.fprintf" "fmt.fprint" "fmt.fprint_typeid" "fmt.fprintln" "fmt.int_from_arg" "fmt.panicf" "fmt.printf" "fmt.println" "fmt.print" "fmt.register_user_formatter" "fmt.sbprintln" "fmt.sbprint" "fmt.sbprintf" "fmt.set_user_formatters" "fmt.stored_enum_value_to_string" "fmt.string_to_enum_value" "fmt.tprintln" "fmt.tprint" "fmt.tprintf" "fmt.wprint" "fmt.wprint_type" "fmt.wprint_typeid" "fmt.wprintf" "fmt.wprintln"))

(setq odin-hash-proc '( "hash.adler32" "hash.crc32" "hash.crc64_ecma_182" "hash.crc64_iso_3306" "hash.crc64_iso_3306_inverse" "hash.crc64_xz" "hash.djb2" "hash.djbx33a" "hash.fnv32" "hash.fnv32a" "hash.fnv64" "hash.fnv64a" "hash.ginger16" "hash.ginger8" "hash.ginger_hash16" "hash.ginger_hash8" "hash.jenkins" "hash.murmur32" "hash.murmur64" "hash.sdbm"))

(setq odin-image-types '( "Alpha_Key" "Channel" "Destroy_Proc" "Error" "GA_Pixel" "GA_Pixel_16" "G_Pixel" "G_Pixel_16" "General_Image_Error" "Image" "Image_Metadata" "Loader_Proc" "Netpbm_Error" "Netpbm_Format" "Netpbm_Header" "Netpbm_Info" "Option" "Options" "PNG_Chunk_Header" "PNG_Chunk" "PNG_Chunk_Type" "PNG_Color_Type" "PNG_Color_Value" "PNG_Error" "PNG_IHDR" "PNG_Info" "PNG_Interlace_Method" "QOI_Color_Space" "QOI_Error" "QOI_Header" "QOI_Info" "RGBA_Pixel" "RGBA_Pixel_16" "RGB_Pixel" "RGB_Pixel_16" "TGA_Header" "Which_File_Type"))

 (setq odin-image-proc '( "image.alpha_add_if_missing" "image.alpha_apply_keyed_alpha" "image.alpha_drop_if_present" "image.apply_palette_rgba" "image.apply_palette_rgb" "image.compute_buffer_size" "image.destroy" "image.expand_grayscale" "image.is_valid_color_image" "image.is_valid_grayscale_image" "image.is_valid_image" "image.load_from_bytes" "image.load_from_file" "image.read_data" "image.read_u8" "image.register" "image.return_single_channel" "image.which_bytes" "image.which_file" "image.write_bytes" "image.apply_palette" "image.load" "image.which"))



(setq odin-png-types '( "CIE_1931_Raw" "CIE_1931" "Error" "Exif" "Filter_Params" "Image" "Options" "PLTE_Entry" "PLTE" "Row_Filter" "Signature" "Text" "cHRM_Raw" "cHRM" "gAMA" "hIST" "iCCP" "pHYs" "pHYs_Unit" "sPLT" "sRGB_Rendering_Intent" "sRGB" "tIME"))

 (setq odin-png-proc '( "png.append_chunk" "png.chrm" "png.chunk_type_to_name" "png.copy_chunk" "png.core_time" "png.defilter_16" "png.defilter_8" "png.defilter_less_than_8" "png.defilter" "png.demo" "png.destroy" "png.exif" "png.filter_paeth" "png.gamma" "png.hist" "png.iccp" "png.iccp_destroy" "png.load_from_bytes" "png.load_from_context" "png.load_from_file" "png.main" "png.phys" "png.phys_to_dpi" "png.plte" "png.read_chunk" "png.read_header" "png.sbit" "png.splt" "png.splt_destroy" "png.srgb" "png.text" "png.text_destroy" "png.time" "png.write_image_as_ppm" "png.load"))

(setq odin-tga-types '( "Error" "Image" "Options" "RGBA_Pixel" "RGB_Pixel"))

 (setq odin-tga-proc '( "tga.save_to_file" "tga.save_to_memory" "tga.save"))

(setq odin-io-types '( "Byte_Reader" "Byte_Scanner" "Byte_Writer" "Close_Proc" "Closer" "Destroy_Proc" "Error" "Flush_Proc" "Flusher" "Limited_Reader" "Multi_Reader" "Multi_Writer" "Read_At_Proc" "Read_Byte_Proc" "Read_Closer" "Read_From_Proc" "Read_Proc" "Read_Rune_Proc" "Read_Write_Closer" "Read_Write_Seeker" "Read_Writer" "Reader" "Reader_At" "Reader_From" "Rune_Reader" "Rune_Scanner" "Section_Reader" "Seek_From" "Seek_Proc" "Seeker" "Size_Proc" "Stream" "Stream_VTable" "Tee_Reader" "Unread_Byte_Proc" "Unread_Rune_Proc" "Write_At_Proc" "Write_Byte_Proc" "Write_Closer" "Write_Flush_Closer" "Write_Flusher" "Write_Proc" "Write_Rune_Proc" "Write_Seeker" "Write_To_Proc" "Writer_At" "Writer" "Writer_To"))

 (setq odin-io-proc '( "io.close" "io.copy_buffer" "io.copy_n" "io.copy" "io.destroy" "io.flush" "io.limited_reader_init" "io.limited_reader_to_reader" "io.multi_reader_destroy" "io.multi_reader_init" "io.multi_writer_destroy" "io.multi_writer_init" "io.n_wrapper" "io.read_at" "io.read_at_least" "io.read_byte" "io.read_from" "io.read_full" "io.read_ptr" "io.read_ptr_at" "io.read_rune" "io.read" "io.section_reader_init" "io.section_reader_to_stream" "io.seek" "io.size" "io.tee_reader_init" "io.tee_reader_to_reader" "io.to_byte_reader" "io.to_byte_scanner" "io.to_byte_writer" "io.to_closer" "io.to_flusher" "io.to_read_closer" "io.to_read_write_closer" "io.to_read_write_seeker" "io.to_read_writer" "io.to_reader" "io.to_reader_at" "io.to_reader_from" "io.to_rune_reader" "io.to_rune_scanner" "io.to_seeker" "io.to_write_closer" "io.to_write_flush_closer" "io.to_write_flusher" "io.to_write_seeker" "io.to_writer_at" "io.to_writer_to" "io.to_writer" "io.unread_byte" "io.unread_rune" "io.write" "io.write_at" "io.write_byte_to_byte_writer" "io.write_byte_to_writer" "io.write_encoded_rune" "io.write_escaped_rune" "io.write_f16" "io.write_f32" "io.write_f64" "io.write_i128" "io.write_i64" "io.write_int" "io.write_ptr" "io.write_ptr_at" "io.write_quoted_string" "io.write_rune" "io.write_string" "io.write_to" "io.write_u128" "io.write_u64" "io.write_uint" "io.write_byte"))

(setq odin-log-types '( "File_Console_Logger_Data" "Level" "Logger_Proc" "Logger" "Multi_Logger_Data" "Option" "Options"))

 (setq odin-log-proc '( "log.create_console_logger" "log.create_file_logger" "log.create_multi_logger" "log.debugf" "log.debug" "log.destroy_console_logger" "log.destroy_file_logger" "log.destroy_multi_logger" "log.do_level_header" "log.do_location_header" "log.error" "log.errorf" "log.fatal" "log.fatalf" "log.file_console_logger_proc" "log.info" "log.infof" "log.logf" "log.log" "log.multi_logger_proc" "log.nil_logger_proc" "log.nil_logger" "log.panicf" "log.panic" "log.warnf" "log.warn"))

(setq odin-math-types '( "Float_Class"))

 (setq odin-math-proc '( "math.acos" "math.acosh" "math.angle_diff" "math.angle_lerp" "math.asinh" "math.asin" "math.atan2_f16be" "math.atan2_f16le" "math.atan" "math.atan2_f16" "math.atan2_f32be" "math.atan2_f32" "math.atan2_f32le" "math.atan2_f64be" "math.atan2_f64" "math.atan2_f64le" "math.atanh" "math.bias" "math.binomial" "math.ceil_f16be" "math.ceil_f16" "math.ceil_f16le" "math.ceil_f32" "math.ceil_f32be" "math.ceil_f32le" "math.ceil_f64be" "math.ceil_f64le" "math.ceil_f64" "math.classify_f16" "math.classify_f16be" "math.classify_f16le" "math.classify_f32be" "math.classify_f32le" "math.classify_f32" "math.classify_f64be" "math.classify_f64le" "math.classify_f64" "math.copy_sign_f16be" "math.copy_sign_f16le" "math.copy_sign_f16" "math.copy_sign_f32be" "math.copy_sign_f32le" "math.copy_sign_f32" "math.copy_sign_f64le" "math.copy_sign_f64" "math.copy_sign_f64be" "math.cos_f16" "math.cos_f16be" "math.cos_f16le" "math.cos_f32" "math.cos_f32be" "math.cos_f32le" "math.cos_f64" "math.cos_f64be" "math.cos_f64le" "math.cosh" "math.cumsum" "math.cumsum_inplace" "math.erf_f16be" "math.erf_f16le" "math.erf_f16" "math.erf_f32" "math.erf_f32be" "math.erf_f32le" "math.erf_f64" "math.erfc_f16" "math.erfc_f16be" "math.erfc_f16le" "math.erfc_f32be" "math.erfc_f32le" "math.erfc_f32" "math.erfc_f64" "math.exp_f16" "math.exp_f16be" "math.exp_f16le" "math.exp_f32be" "math.exp_f32le" "math.exp_f32" "math.exp_f64le" "math.exp_f64" "math.exp_f64be" "math.factorial" "math.floor_div" "math.floor_f16" "math.floor_f16be" "math.floor_f16le" "math.floor_f32be" "math.floor_f32le" "math.floor_f32" "math.floor_f64" "math.floor_f64be" "math.floor_f64le" "math.floor_mod" "math.fmuladd_f16" "math.fmuladd_f16be" "math.fmuladd_f16le" "math.fmuladd_f32" "math.fmuladd_f32be" "math.fmuladd_f32le" "math.fmuladd_f64be" "math.fmuladd_f64le" "math.fmuladd_f64" "math.frexp_f16" "math.frexp_f16be" "math.frexp_f16le" "math.frexp_f32be" "math.frexp_f32" "math.frexp_f32le" "math.frexp_f64be" "math.frexp_f64" "math.frexp_f64le" "math.gain" "math.gamma_f16" "math.gamma_f16be" "math.gamma_f16le" "math.gamma_f32" "math.gamma_f32be" "math.gamma_f32le" "math.gamma_f64" "math.gamma_f64be" "math.gamma_f64le" "math.gcd" "math.ilogb_f16be" "math.ilogb_f16le" "math.ilogb_f16" "math.ilogb_f32" "math.ilogb_f32be" "math.ilogb_f32le" "math.ilogb_f64" "math.ilogb_f64be" "math.ilogb_f64le" "math.inf_f16be" "math.inf_f16le" "math.inf_f16" "math.inf_f32" "math.inf_f32be" "math.inf_f32le" "math.inf_f64" "math.inf_f64be" "math.inf_f64le" "math.is_inf_f16be" "math.is_inf_f16le" "math.is_inf_f16" "math.is_inf_f32be" "math.is_inf_f32" "math.is_inf_f32le" "math.is_inf_f64" "math.is_inf_f64be" "math.is_inf_f64le" "math.is_nan_f16" "math.is_nan_f16be" "math.is_nan_f16le" "math.is_nan_f32" "math.is_nan_f32be" "math.is_nan_f32le" "math.is_nan_f64be" "math.is_nan_f64le" "math.is_nan_f64" "math.is_power_of_two" "math.lcm" "math.ldexp_f16" "math.ldexp_f16be" "math.ldexp_f16le" "math.ldexp_f32be" "math.ldexp_f32le" "math.ldexp_f32" "math.ldexp_f64be" "math.ldexp_f64le" "math.ldexp_f64" "math.lerp" "math.lgamma_f16" "math.lgamma_f16be" "math.lgamma_f16le" "math.lgamma_f32be" "math.lgamma_f32le" "math.lgamma_f32" "math.lgamma_f64be" "math.lgamma_f64" "math.lgamma_f64le" "math.ln_f16" "math.ln_f16be" "math.ln_f16le" "math.ln_f32" "math.ln_f32be" "math.ln_f32le" "math.ln_f64be" "math.ln_f64le" "math.ln_f64" "math.log10_f16" "math.log10_f16be" "math.log10_f16le" "math.log10_f32" "math.log10_f32be" "math.log10_f32le" "math.log10_f64be" "math.log10_f64le" "math.log10_f64" "math.log1p_f16" "math.log1p_f16be" "math.log1p_f16le" "math.log1p_f32le" "math.log1p_f32" "math.log1p_f32be" "math.log1p_f64be" "math.log1p_f64" "math.log1p_f64le" "math.log2_f16" "math.log2_f16be" "math.log2_f16le" "math.log2_f32be" "math.log2_f32le" "math.log2_f32" "math.log2_f64" "math.log2_f64be" "math.log2_f64le" "math.log_f16" "math.log_f16be" "math.log_f16le" "math.log_f32be" "math.log_f32le" "math.log_f32" "math.log_f64" "math.log_f64be" "math.log_f64le" "math.logb_f16be" "math.logb_f16le" "math.logb_f16" "math.logb_f32be" "math.logb_f32le" "math.logb_f32" "math.logb_f64" "math.logb_f64be" "math.logb_f64le" "math.mod_f16be" "math.mod_f16" "math.mod_f16le" "math.mod_f32be" "math.mod_f32le" "math.mod_f32" "math.mod_f64" "math.mod_f64be" "math.mod_f64le" "math.modf_f16be" "math.modf_f16le" "math.modf_f16" "math.modf_f32be" "math.modf_f32le" "math.modf_f32" "math.modf_f64le" "math.modf_f64" "math.modf_f64be" "math.nan_f16le" "math.nan_f16" "math.nan_f16be" "math.nan_f32" "math.nan_f32be" "math.nan_f32le" "math.nan_f64le" "math.nan_f64" "math.nan_f64be" "math.next_power_of_two" "math.nextafter_f16" "math.nextafter_f16be" "math.nextafter_f16le" "math.nextafter_f32" "math.nextafter_f32be" "math.nextafter_f32le" "math.nextafter_f64be" "math.nextafter_f64" "math.nextafter_f64le" "math.normalize_f16be" "math.normalize_f16le" "math.normalize_f16" "math.normalize_f32" "math.normalize_f32be" "math.normalize_f32le" "math.normalize_f64be" "math.normalize_f64le" "math.normalize_f64" "math.pow_f16" "math.pow_f16be" "math.pow_f16le" "math.pow_f32" "math.pow_f32be" "math.pow_f32le" "math.pow_f64" "math.pow_f64be" "math.pow_f64le" "math.prod" "math.remainder_f16be" "math.remainder_f16le" "math.remainder_f16" "math.remainder_f32" "math.remainder_f32be" "math.remainder_f32le" "math.remainder_f64" "math.remainder_f64be" "math.remainder_f64le" "math.remap" "math.round_f16be" "math.round_f16" "math.round_f16le" "math.round_f32be" "math.round_f32" "math.round_f32le" "math.round_f64be" "math.round_f64" "math.round_f64le" "math.saturate" "math.sign_bit_f16be" "math.sign_bit_f16le" "math.sign_bit_f16" "math.sign_bit_f32" "math.sign_bit_f32be" "math.sign_bit_f32le" "math.sign_bit_f64be" "math.sign_bit_f64" "math.sign_bit_f64le" "math.sign_f16" "math.sign_f16be" "math.sign_f16le" "math.sign_f32" "math.sign_f32be" "math.sign_f32le" "math.sign_f64be" "math.sign_f64" "math.sign_f64le" "math.signbit_f16be" "math.signbit_f16" "math.signbit_f16le" "math.signbit_f32" "math.signbit_f32be" "math.signbit_f32le" "math.signbit_f64" "math.signbit_f64be" "math.signbit_f64le" "math.sin_f16be" "math.sin_f16le" "math.sin_f16" "math.sin_f32be" "math.sin_f32le" "math.sin_f32" "math.sin_f64" "math.sin_f64be" "math.sin_f64le" "math.sinh" "math.smoothstep" "math.sqrt_f16" "math.sqrt_f16be" "math.sqrt_f16le" "math.sqrt_f32be" "math.sqrt_f32le" "math.sqrt_f32" "math.sqrt_f64be" "math.sqrt_f64" "math.sqrt_f64le" "math.step" "math.sum" "math.tan_f16be" "math.tan_f16le" "math.tan_f16" "math.tan_f32" "math.tan_f32be" "math.tan_f32le" "math.tan_f64be" "math.tan_f64" "math.tan_f64le" "math.tanh" "math.to_degrees_f16be" "math.to_degrees_f16" "math.to_degrees_f16le" "math.to_degrees_f32" "math.to_degrees_f32be" "math.to_degrees_f32le" "math.to_degrees_f64be" "math.to_degrees_f64le" "math.to_degrees_f64" "math.to_radians_f16be" "math.to_radians_f16le" "math.to_radians_f16" "math.to_radians_f32le" "math.to_radians_f32" "math.to_radians_f32be" "math.to_radians_f64be" "math.to_radians_f64le" "math.to_radians_f64" "math.trunc_f16be" "math.trunc_f16le" "math.trunc_f16" "math.trunc_f32be" "math.trunc_f32le" "math.trunc_f32" "math.trunc_f64" "math.trunc_f64be" "math.trunc_f64le" "math.unlerp" "math.wrap" "math.atan2" "math.ceil" "math.classify" "math.copy_sign" "math.cos" "math.erfc" "math.erf" "math.exp" "math.floor" "math.fmuladd" "math.frexp" "math.gamma" "math.ilogb" "math.is_inf" "math.is_nan" "math.ldexp" "math.lgamma" "math.ln" "math.logb" "math.log" "math.log10" "math.log1p" "math.log2" "math.mod" "math.modf" "math.nextafter" "math.normalize" "math.pow" "math.remainder" "math.round" "math.sign_bit" "math.sign" "math.signbit" "math.sin" "math.split_decimal" "math.sqrt" "math.tan" "math.to_degrees" "math.to_radians" "math.trunc"))

(setq odin-big-types '( "Category" "DIGIT" "Endianness" "Error" "Event" "Flags" "Flag" "Int" "Order" "Primality_Flags" "Primality_Flag" "Rat" "Sign"))

 (setq odin-big-proc '( "big.SCOPED_COUNT_ADD" "big.SCOPED_TIMING" "big.assert_if_nil_int" "big.assert_if_nil_rat" "big.assert_initialized" "big.clamp" "big.clear_if_uninitialized_multi" "big.clear_if_uninitialized_single" "big.copy_digits" "big.count_bits" "big.destroy_constants" "big.digit_log" "big.error_if_immutable_multi" "big.error_if_immutable_single" "big.ilog2" "big.initialize_constants" "big.int_abs" "big.int_add_digit" "big.int_add" "big.int_add_rat" "big.int_addmod" "big.int_and" "big.int_atoi" "big.int_bitfield_extract" "big.int_bitfield_extract_single" "big.int_choose_digit" "big.int_clear" "big.int_cmp" "big.int_cmp_digit" "big.int_cmp_mag" "big.int_compare" "big.int_compare_digit" "big.int_compare_magnitude" "big.int_complement" "big.int_copy" "big.int_count_lsb" "big.int_destroy" "big.int_div_digit" "big.int_div_rat" "big.int_divmod" "big.int_div" "big.int_divmod_digit" "big.int_double" "big.int_equals_digit" "big.int_equals" "big.int_equals_abs" "big.int_factorial" "big.int_from_bytes_big_python" "big.int_from_bytes_big" "big.int_from_bytes_little_python" "big.int_from_bytes_little" "big.int_gcd_lcm" "big.int_gcd" "big.int_get_float" "big.int_get_i128" "big.int_get_i64" "big.int_get" "big.int_get_i32" "big.int_get_u128" "big.int_get_u32" "big.int_get_u64" "big.int_greater_than_digit" "big.int_greater_than" "big.int_greater_than_abs" "big.int_greater_than_or_equal" "big.int_greater_than_or_equal_abs" "big.int_greater_than_or_equal_digit" "big.int_grow" "big.int_halve" "big.int_inf" "big.int_init_multi" "big.int_is_even" "big.int_is_initialized" "big.int_is_negative" "big.int_is_odd" "big.int_is_positive" "big.int_is_power_of_two" "big.int_is_square" "big.int_is_zero" "big.int_itoa_cstring" "big.int_itoa_raw" "big.int_itoa_string" "big.int_lcm" "big.int_less_than_abs" "big.int_less_than_digit" "big.int_less_than_or_equal_abs" "big.int_less_than_or_equal" "big.int_less_than_or_equal_digit" "big.int_less_than" "big.int_log" "big.int_minus_inf" "big.int_minus_one" "big.int_mod_digit" "big.int_mod" "big.int_mod_bits" "big.int_mul" "big.int_mul_digit" "big.int_mul_rat" "big.int_mulmod" "big.int_nan" "big.int_neg" "big.int_one" "big.int_or" "big.int_pow" "big.int_pow_int" "big.int_random" "big.int_random_digit" "big.int_root_n" "big.int_set_from_integer" "big.int_shl" "big.int_shr" "big.int_shr_signed" "big.int_shrmod" "big.int_sqrmod" "big.int_sqrt" "big.int_sqr" "big.int_sub" "big.int_sub_digit" "big.int_sub_rat" "big.int_submod" "big.int_swap" "big.int_to_bytes_big" "big.int_to_bytes_big_python" "big.int_to_bytes_little" "big.int_to_bytes_little_python" "big.int_to_bytes_size" "big.int_to_cstring" "big.int_to_string" "big.int_xor" "big.internal_assert_initialized" "big.internal_clamp" "big.internal_clear_if_uninitialized_multi" "big.internal_clear_if_uninitialized_single" "big.internal_copy_digits" "big.internal_count_bits" "big.internal_digit_log" "big.internal_error_if_immutable_multi" "big.internal_error_if_immutable_single" "big.internal_get_low_u32" "big.internal_get_low_u64" "big.internal_int_abs" "big.internal_int_add_digit" "big.internal_int_add_signed" "big.internal_int_add_unsigned" "big.internal_int_addmod" "big.internal_int_allocated_cap" "big.internal_int_and" "big.internal_int_bitfield_extract" "big.internal_int_bitfield_extract_bool" "big.internal_int_bitfield_extract_single" "big.internal_int_bitfield_set_single" "big.internal_int_bitfield_toggle_single" "big.internal_int_bitfield_unset_single" "big.internal_int_clear" "big.internal_int_compare_digit" "big.internal_int_compare_magnitude" "big.internal_int_compare" "big.internal_int_complement" "big.internal_int_copy" "big.internal_int_count_lsb" "big.internal_int_decr" "big.internal_int_destroy" "big.internal_int_divmod" "big.internal_int_div" "big.internal_int_divmod_digit" "big.internal_int_equals_abs" "big.internal_int_equals_digit" "big.internal_int_equals" "big.internal_int_exponent_mod" "big.internal_int_extended_euclidean" "big.internal_int_factorial" "big.internal_int_gcd" "big.internal_int_gcd_lcm" "big.internal_int_get_float" "big.internal_int_get_i128" "big.internal_int_get_i64" "big.internal_int_get_u128" "big.internal_int_get_u32" "big.internal_int_get_u64" "big.internal_int_get" "big.internal_int_get_i32" "big.internal_int_greater_than" "big.internal_int_greater_than_abs" "big.internal_int_greater_than_or_equal" "big.internal_int_greater_than_or_equal_abs" "big.internal_int_greater_than_digit" "big.internal_int_greater_than_or_equal_digit" "big.internal_int_grow" "big.internal_int_incr" "big.internal_int_inf" "big.internal_int_init_multi" "big.internal_int_inverse_modulo" "big.internal_int_is_even" "big.internal_int_is_initialized" "big.internal_int_is_negative" "big.internal_int_is_odd" "big.internal_int_is_positive" "big.internal_int_is_power_of_two" "big.internal_int_is_prime" "big.internal_int_is_square" "big.internal_int_is_zero" "big.internal_int_kronecker" "big.internal_int_lcm" "big.internal_int_legendre" "big.internal_int_less_than_abs" "big.internal_int_less_than_digit" "big.internal_int_less_than_or_equal_abs" "big.internal_int_less_than_or_equal_digit" "big.internal_int_less_than" "big.internal_int_less_than_or_equal" "big.internal_int_log" "big.internal_int_minus_inf" "big.internal_int_minus_one" "big.internal_int_mod" "big.internal_int_mod_bits" "big.internal_int_mod_digit" "big.internal_int_mul_denom" "big.internal_int_mul_digit" "big.internal_int_mul_integer" "big.internal_int_mulmod" "big.internal_int_mul" "big.internal_int_nan" "big.internal_int_neg" "big.internal_int_one" "big.internal_int_or" "big.internal_int_pack" "big.internal_int_pack_count" "big.internal_int_pow" "big.internal_int_pow_int" "big.internal_int_power_of_two" "big.internal_int_prime_frobenius_underwood" "big.internal_int_prime_is_divisible" "big.internal_int_prime_miller_rabin" "big.internal_int_prime_next_prime" "big.internal_int_prime_strong_lucas_selfridge" "big.internal_int_random_digit" "big.internal_int_random" "big.internal_int_read_from_ascii_file" "big.internal_int_root_n" "big.internal_int_scale_denom" "big.internal_int_set_from_integer" "big.internal_int_shl1" "big.internal_int_shl" "big.internal_int_shr1" "big.internal_int_shr_signed" "big.internal_int_shr" "big.internal_int_shrink" "big.internal_int_shrmod" "big.internal_int_sqrmod" "big.internal_int_sqrt" "big.internal_int_sqrtmod_prime" "big.internal_int_sub_digit" "big.internal_int_sub_signed" "big.internal_int_sub_unsigned" "big.internal_int_submod" "big.internal_int_swap" "big.internal_int_unpack" "big.internal_int_write_to_ascii_file" "big.internal_int_xor" "big.internal_int_zero_unused" "big.internal_platform_abs" "big.internal_platform_count_lsb" "big.internal_prime_fermat" "big.internal_random_prime" "big.internal_rat_destroy" "big.internal_rat_is_zero" "big.internal_rat_norm" "big.internal_rat_swap" "big.internal_rat_to_float" "big.internal_small_pow" "big.internal_sqr" "big.number_of_rabin_miller_trials" "big.platform_abs" "big.platform_count_lsb" "big.platform_int_is_power_of_two" "big.power_of_two" "big.print_bool" "big.print" "big.print_configation" "big.print_timings" "big.print_value" "big.radix_size" "big.rat_abs" "big.rat_add_int" "big.rat_add_rat" "big.rat_compare" "big.rat_copy" "big.rat_div_int" "big.rat_div_rat" "big.rat_is_even" "big.rat_is_int" "big.rat_is_negative" "big.rat_is_odd" "big.rat_is_positive" "big.rat_is_zero" "big.rat_mul_int" "big.rat_mul_rat" "big.rat_neg" "big.rat_set_digit" "big.rat_set_f16" "big.rat_set_f32" "big.rat_set_f64" "big.rat_set_frac_digit" "big.rat_set_frac_int" "big.rat_set_i64" "big.rat_set_int" "big.rat_set_rat" "big.rat_set_u64" "big.rat_sign" "big.rat_sqr" "big.rat_sub_int" "big.rat_sub_rat" "big.rat_swap" "big.rat_to_f16" "big.rat_to_f32" "big.rat_to_f64" "big.shrink" "big.small_pow" "big.zero_unused" "big.abs" "big.addmod" "big.add" "big.and" "big.assert_if_nil" "big.atoi" "big.choose" "big.clear_if_uninitialized" "big.clear" "big.cmp" "big.cmp_mag" "big.compare_magnitude" "big.compare" "big.complement" "big.copy" "big.count_lsb" "big.destroy" "big.divmod" "big.div" "big.double" "big.eq" "big.eq_abs" "big.equals" "big.equals_abs" "big.error_if_immutable" "big.exp" "big.factorial" "big.gcd" "big.gcd_lcm" "big.get_i128" "big.get" "big.get_i32" "big.get_i64" "big.get_u128" "big.get_u32" "big.get_u64" "big.greater_than_abs" "big.greater_than_or_equal" "big.greater_than" "big.greater_than_or_equal_abs" "big.grow" "big.gteq_abs" "big.gteq" "big.gt" "big.gt_abs" "big.halve" "big.inf" "big.init_multi" "big.internal_abs" "big.internal_add_signed" "big.internal_add_unsigned" "big.internal_addmod" "big.internal_add" "big.internal_and" "big.internal_clear_if_uninitialized" "big.internal_clear" "big.internal_cmp" "big.internal_cmp_digit" "big.internal_cmp_mag" "big.internal_compare_digit" "big.internal_compare_magnitude" "big.internal_compare" "big.internal_complement" "big.internal_copy" "big.internal_count_lsb" "big.internal_decr" "big.internal_destroy" "big.internal_div" "big.internal_divmod" "big.internal_eq_abs" "big.internal_equals" "big.internal_eq" "big.internal_equals_abs" "big.internal_error_if_immutable" "big.internal_exp" "big.internal_get_i128" "big.internal_get_i32" "big.internal_get_u128" "big.internal_get" "big.internal_get_i64" "big.internal_get_u32" "big.internal_get_u64" "big.internal_greater_than_abs" "big.internal_greater_than_or_equal" "big.internal_greater_than_or_equal_abs" "big.internal_greater_than" "big.internal_grow" "big.internal_gt" "big.internal_gt_abs" "big.internal_gte_abs" "big.internal_gte" "big.internal_incr" "big.internal_inf" "big.internal_init_multi" "big.internal_invmod" "big.internal_is_even" "big.internal_is_initialized" "big.internal_is_negative" "big.internal_is_odd" "big.internal_is_positive" "big.internal_is_power_of_two" "big.internal_is_zero" "big.internal_less_than_abs" "big.internal_less_than_or_equal_abs" "big.internal_less_than" "big.internal_less_than_or_equal" "big.internal_log" "big.internal_lt_abs" "big.internal_lte" "big.internal_lte_abs" "big.internal_lt" "big.internal_minus_inf" "big.internal_minus_one" "big.internal_mod" "big.internal_mul" "big.internal_mulmod" "big.internal_nan" "big.internal_neg" "big.internal_one" "big.internal_or" "big.internal_pow" "big.internal_random" "big.internal_root_n" "big.internal_set" "big.internal_shl" "big.internal_shr_signed" "big.internal_shr" "big.internal_shrink" "big.internal_shrmod" "big.internal_sqrmod" "big.internal_sqrt" "big.internal_sub" "big.internal_sub_unsigned" "big.internal_submod" "big.internal_swap" "big.internal_xor" "big.internal_zero_unused" "big.internal_zero" "big.is_even" "big.is_initialized" "big.is_neg" "big.is_negative" "big.is_odd" "big.is_positive" "big.is_pos" "big.is_power_of_two" "big.is_zero" "big.itoa" "big.lcm" "big.less_than_or_equal_abs" "big.less_than_or_equal" "big.less_than" "big.less_than_abs" "big.log" "big.lt" "big.lt_abs" "big.lteq_abs" "big.lteq" "big.minus_inf" "big.minus_one" "big.mod_bits" "big.mod" "big.mulmod" "big.mul" "big.nan" "big.neg" "big.one" "big.or" "big.pow" "big.random" "big.rat_set_frac" "big.root_n" "big.set" "big.shl1" "big.shl" "big.shr" "big.shr1" "big.shr_signed" "big.shrmod" "big.sqrmod" "big.sqrt" "big.sqr" "big.submod" "big.sub" "big.swap" "big.xor" "big.zero"))

(setq odin-bits-types '( "I16_MAX" "I16_MIN" "I32_MAX" "I32_MIN" "I64_MAX" "I64_MIN" "I8_MAX" "I8_MIN" "U16_MAX" "U16_MIN" "U32_MAX" "U32_MIN" "U64_MAX" "U64_MIN" "U8_MAX" "U8_MIN"))

 (setq odin-bits-proc '( "bits.add_u32" "bits.add_u64" "bits.add_uint" "bits.bitfield_extract_i128" "bits.bitfield_extract_i16" "bits.bitfield_extract_i32" "bits.bitfield_extract_i64" "bits.bitfield_extract_i8" "bits.bitfield_extract_int" "bits.bitfield_extract_u128" "bits.bitfield_extract_u16" "bits.bitfield_extract_u32" "bits.bitfield_extract_u64" "bits.bitfield_extract_u8" "bits.bitfield_extract_uint" "bits.bitfield_insert_i128" "bits.bitfield_insert_i16" "bits.bitfield_insert_i32" "bits.bitfield_insert_i64" "bits.bitfield_insert_i8" "bits.bitfield_insert_int" "bits.bitfield_insert_u128" "bits.bitfield_insert_u16" "bits.bitfield_insert_u32" "bits.bitfield_insert_u64" "bits.bitfield_insert_u8" "bits.bitfield_insert_uint" "bits.byte_swap" "bits.count_leading_zeros" "bits.count_ones" "bits.count_trailing_zeros" "bits.count_zeros" "bits.div_u32" "bits.div_u64" "bits.div_uint" "bits.from_be_u16" "bits.from_be_u32" "bits.from_be_u64" "bits.from_be_u8" "bits.from_be_uint" "bits.from_le_u16" "bits.from_le_u32" "bits.from_le_u64" "bits.from_le_u8" "bits.from_le_uint" "bits.is_power_of_two_i16" "bits.is_power_of_two_i32" "bits.is_power_of_two_i64" "bits.is_power_of_two_i8" "bits.is_power_of_two_int" "bits.is_power_of_two_u16" "bits.is_power_of_two_u32" "bits.is_power_of_two_u64" "bits.is_power_of_two_u8" "bits.is_power_of_two_uint" "bits.leading_zeros" "bits.len_u16" "bits.len_u32" "bits.len_u64" "bits.len_u8" "bits.len_uint" "bits.log2" "bits.mul_u32" "bits.mul_u64" "bits.mul_uint" "bits.overflowing_add" "bits.overflowing_mul" "bits.overflowing_sub" "bits.reverse_bits" "bits.rotate_left16" "bits.rotate_left32" "bits.rotate_left64" "bits.rotate_left8" "bits.rotate_left" "bits.sub_u32" "bits.sub_u64" "bits.sub_uint" "bits.to_be_u16" "bits.to_be_u32" "bits.to_be_u64" "bits.to_be_u8" "bits.to_be_uint" "bits.to_le_u16" "bits.to_le_u32" "bits.to_le_u64" "bits.to_le_u8" "bits.to_le_uint" "bits.trailing_zeros" "bits.add" "bits.bitfield_extract" "bits.bitfield_insert" "bits.div" "bits.is_power_of_two" "bits.len" "bits.mul" "bits.sub"))

(setq odin-fixed-types '( "Fixed" "Fixed13_3" "Fixed16_16" "Fixed26_6" "Fixed32_32" "Fixed4_4" "Fixed52_12" "Fixed5_3" "Fixed6_2" "Fixed7_1" "Fixed8_8"))

 (setq odin-fixed-proc '( "fixed.add" "fixed.append" "fixed.ceil" "fixed.div" "fixed.div_sat" "fixed.floor" "fixed.init_from_f64" "fixed.init_from_parts" "fixed.mul_sat" "fixed.mul" "fixed.round" "fixed.sub" "fixed.to_f64" "fixed.to_string"))

(setq odin-linalg-types '( "Euler_Angle_Order" "Matrix1f16" "Matrix1f32" "Matrix1f64" "Matrix1x1f16" "Matrix1x1f32" "Matrix1x1f64" "Matrix1x2f16" "Matrix1x2f32" "Matrix1x2f64" "Matrix1x3f16" "Matrix1x3f32" "Matrix1x3f64" "Matrix1x4f16" "Matrix1x4f32" "Matrix1x4f64" "Matrix2f16" "Matrix2f32" "Matrix2f64" "Matrix2x1f16" "Matrix2x1f32" "Matrix2x1f64" "Matrix2x2f16" "Matrix2x2f32" "Matrix2x2f64" "Matrix2x3f16" "Matrix2x3f32" "Matrix2x3f64" "Matrix2x4f16" "Matrix2x4f32" "Matrix2x4f64" "Matrix3f16" "Matrix3f32" "Matrix3f64" "Matrix3x1f16" "Matrix3x1f32" "Matrix3x1f64" "Matrix3x2f16" "Matrix3x2f32" "Matrix3x2f64" "Matrix3x3f16" "Matrix3x3f32" "Matrix3x3f64" "Matrix3x4f16" "Matrix3x4f32" "Matrix3x4f64" "Matrix4f16" "Matrix4f32" "Matrix4f64" "Matrix4x1f16" "Matrix4x1f32" "Matrix4x1f64" "Matrix4x2f16" "Matrix4x2f32" "Matrix4x2f64" "Matrix4x3f16" "Matrix4x3f32" "Matrix4x3f64" "Matrix4x4f16" "Matrix4x4f32" "Matrix4x4f64" "Quaternionf16" "Quaternionf32" "Quaternionf64" "Scalar_Components" "Vector2_Components" "Vector2f16" "Vector2f32" "Vector2f64" "Vector3_Components" "Vector3f16" "Vector3f32" "Vector3f64" "Vector4_Components" "Vector4f16" "Vector4f32" "Vector4f64"))

 (setq odin-linalg-proc '( "linalg.abs" "linalg.acos" "linalg.all" "linalg.angle_axis_from_quaternion_f16" "linalg.angle_axis_from_quaternion_f32" "linalg.angle_axis_from_quaternion_f64" "linalg.angle_from_quaternion_f16" "linalg.angle_from_quaternion_f32" "linalg.angle_from_quaternion_f64" "linalg.any" "linalg.array_cast" "linalg.asin" "linalg.atan" "linalg.atan2" "linalg.axis_from_quaternion_f16" "linalg.axis_from_quaternion_f32" "linalg.axis_from_quaternion_f64" "linalg.catmull_rom" "linalg.ceil" "linalg.clamp" "linalg.classify_array" "linalg.classify_single" "linalg.cos" "linalg.cubic" "linalg.degrees" "linalg.distance" "linalg.equal_array" "linalg.equal_single" "linalg.euclidean_from_polar_f16" "linalg.euclidean_from_polar_f32" "linalg.euclidean_from_polar_f64" "linalg.euler_angles_from_matrix3_f16" "linalg.euler_angles_from_matrix3_f32" "linalg.euler_angles_from_matrix3_f64" "linalg.euler_angles_from_matrix4_f16" "linalg.euler_angles_from_matrix4_f32" "linalg.euler_angles_from_matrix4_f64" "linalg.euler_angles_from_quaternion_f16" "linalg.euler_angles_from_quaternion_f32" "linalg.euler_angles_from_quaternion_f64" "linalg.euler_angles_xyx_from_matrix3_f16" "linalg.euler_angles_xyx_from_matrix3_f32" "linalg.euler_angles_xyx_from_matrix3_f64" "linalg.euler_angles_xyx_from_matrix4_f16" "linalg.euler_angles_xyx_from_matrix4_f32" "linalg.euler_angles_xyx_from_matrix4_f64" "linalg.euler_angles_xyx_from_quaternion_f16" "linalg.euler_angles_xyx_from_quaternion_f32" "linalg.euler_angles_xyx_from_quaternion_f64" "linalg.euler_angles_xyz_from_matrix3_f16" "linalg.euler_angles_xyz_from_matrix3_f32" "linalg.euler_angles_xyz_from_matrix3_f64" "linalg.euler_angles_xyz_from_matrix4_f16" "linalg.euler_angles_xyz_from_matrix4_f32" "linalg.euler_angles_xyz_from_matrix4_f64" "linalg.euler_angles_xyz_from_quaternion_f16" "linalg.euler_angles_xyz_from_quaternion_f32" "linalg.euler_angles_xyz_from_quaternion_f64" "linalg.euler_angles_xzx_from_matrix3_f16" "linalg.euler_angles_xzx_from_matrix3_f32" "linalg.euler_angles_xzx_from_matrix3_f64" "linalg.euler_angles_xzx_from_matrix4_f16" "linalg.euler_angles_xzx_from_matrix4_f32" "linalg.euler_angles_xzx_from_matrix4_f64" "linalg.euler_angles_xzx_from_quaternion_f16" "linalg.euler_angles_xzx_from_quaternion_f32" "linalg.euler_angles_xzx_from_quaternion_f64" "linalg.euler_angles_xzy_from_matrix3_f16" "linalg.euler_angles_xzy_from_matrix3_f32" "linalg.euler_angles_xzy_from_matrix3_f64" "linalg.euler_angles_xzy_from_matrix4_f16" "linalg.euler_angles_xzy_from_matrix4_f32" "linalg.euler_angles_xzy_from_matrix4_f64" "linalg.euler_angles_xzy_from_quaternion_f16" "linalg.euler_angles_xzy_from_quaternion_f32" "linalg.euler_angles_xzy_from_quaternion_f64" "linalg.euler_angles_yxy_from_matrix3_f16" "linalg.euler_angles_yxy_from_matrix3_f32" "linalg.euler_angles_yxy_from_matrix3_f64" "linalg.euler_angles_yxy_from_matrix4_f16" "linalg.euler_angles_yxy_from_matrix4_f32" "linalg.euler_angles_yxy_from_matrix4_f64" "linalg.euler_angles_yxy_from_quaternion_f16" "linalg.euler_angles_yxy_from_quaternion_f32" "linalg.euler_angles_yxy_from_quaternion_f64" "linalg.euler_angles_yxz_from_matrix3_f16" "linalg.euler_angles_yxz_from_matrix3_f32" "linalg.euler_angles_yxz_from_matrix3_f64" "linalg.euler_angles_yxz_from_matrix4_f16" "linalg.euler_angles_yxz_from_matrix4_f32" "linalg.euler_angles_yxz_from_matrix4_f64" "linalg.euler_angles_yxz_from_quaternion_f16" "linalg.euler_angles_yxz_from_quaternion_f32" "linalg.euler_angles_yxz_from_quaternion_f64" "linalg.euler_angles_yzx_from_matrix3_f16" "linalg.euler_angles_yzx_from_matrix3_f32" "linalg.euler_angles_yzx_from_matrix3_f64" "linalg.euler_angles_yzx_from_matrix4_f16" "linalg.euler_angles_yzx_from_matrix4_f32" "linalg.euler_angles_yzx_from_matrix4_f64" "linalg.euler_angles_yzx_from_quaternion_f16" "linalg.euler_angles_yzx_from_quaternion_f32" "linalg.euler_angles_yzx_from_quaternion_f64" "linalg.euler_angles_yzy_from_matrix3_f16" "linalg.euler_angles_yzy_from_matrix3_f32" "linalg.euler_angles_yzy_from_matrix3_f64" "linalg.euler_angles_yzy_from_matrix4_f16" "linalg.euler_angles_yzy_from_matrix4_f32" "linalg.euler_angles_yzy_from_matrix4_f64" "linalg.euler_angles_yzy_from_quaternion_f16" "linalg.euler_angles_yzy_from_quaternion_f32" "linalg.euler_angles_yzy_from_quaternion_f64" "linalg.euler_angles_zxy_from_matrix3_f16" "linalg.euler_angles_zxy_from_matrix3_f32" "linalg.euler_angles_zxy_from_matrix3_f64" "linalg.euler_angles_zxy_from_matrix4_f16" "linalg.euler_angles_zxy_from_matrix4_f32" "linalg.euler_angles_zxy_from_matrix4_f64" "linalg.euler_angles_zxy_from_quaternion_f16" "linalg.euler_angles_zxy_from_quaternion_f32" "linalg.euler_angles_zxy_from_quaternion_f64" "linalg.euler_angles_zxz_from_matrix3_f16" "linalg.euler_angles_zxz_from_matrix3_f32" "linalg.euler_angles_zxz_from_matrix3_f64" "linalg.euler_angles_zxz_from_matrix4_f16" "linalg.euler_angles_zxz_from_matrix4_f32" "linalg.euler_angles_zxz_from_matrix4_f64" "linalg.euler_angles_zxz_from_quaternion_f16" "linalg.euler_angles_zxz_from_quaternion_f32" "linalg.euler_angles_zxz_from_quaternion_f64" "linalg.euler_angles_zyx_from_matrix3_f16" "linalg.euler_angles_zyx_from_matrix3_f32" "linalg.euler_angles_zyx_from_matrix3_f64" "linalg.euler_angles_zyx_from_matrix4_f16" "linalg.euler_angles_zyx_from_matrix4_f32" "linalg.euler_angles_zyx_from_matrix4_f64" "linalg.euler_angles_zyx_from_quaternion_f16" "linalg.euler_angles_zyx_from_quaternion_f32" "linalg.euler_angles_zyx_from_quaternion_f64" "linalg.euler_angles_zyz_from_matrix3_f16" "linalg.euler_angles_zyz_from_matrix3_f32" "linalg.euler_angles_zyz_from_matrix3_f64" "linalg.euler_angles_zyz_from_matrix4_f16" "linalg.euler_angles_zyz_from_matrix4_f32" "linalg.euler_angles_zyz_from_matrix4_f64" "linalg.euler_angles_zyz_from_quaternion_f16" "linalg.euler_angles_zyz_from_quaternion_f32" "linalg.euler_angles_zyz_from_quaternion_f64" "linalg.exp10" "linalg.exp2" "linalg.exp" "linalg.face_forward" "linalg.floor" "linalg.fract" "linalg.greater_than_array" "linalg.greater_than_equal_array" "linalg.greater_than_equal_single" "linalg.greater_than_single" "linalg.hermite" "linalg.identity" "linalg.inverse_sqrt" "linalg.is_inf_array" "linalg.is_inf_single" "linalg.is_nan_array" "linalg.is_nan_single" "linalg.lerp" "linalg.less_than_array" "linalg.less_than_equal_array" "linalg.less_than_equal_single" "linalg.less_than_single" "linalg.ln" "linalg.log10" "linalg.log2" "linalg.log" "linalg.matrix2_adjoint_f16" "linalg.matrix2_adjoint_f32" "linalg.matrix2_adjoint_f64" "linalg.matrix2_determinant_f16" "linalg.matrix2_determinant_f32" "linalg.matrix2_determinant_f64" "linalg.matrix2_from_matrix3_f16" "linalg.matrix2_from_matrix3_f32" "linalg.matrix2_from_matrix3_f64" "linalg.matrix2_from_matrix4_f16" "linalg.matrix2_from_matrix4_f32" "linalg.matrix2_from_matrix4_f64" "linalg.matrix2_from_scalar_f16" "linalg.matrix2_from_scalar_f32" "linalg.matrix2_from_scalar_f64" "linalg.matrix2_inverse_f16" "linalg.matrix2_inverse_f32" "linalg.matrix2_inverse_f64" "linalg.matrix2_inverse_transpose_f16" "linalg.matrix2_inverse_transpose_f32" "linalg.matrix2_inverse_transpose_f64" "linalg.matrix2_orthonormalize_f16" "linalg.matrix2_orthonormalize_f32" "linalg.matrix2_orthonormalize_f64" "linalg.matrix3_adjoint_f16" "linalg.matrix3_adjoint_f32" "linalg.matrix3_adjoint_f64" "linalg.matrix3_determinant_f16" "linalg.matrix3_determinant_f32" "linalg.matrix3_determinant_f64" "linalg.matrix3_from_derived_euler_angle_x_f16" "linalg.matrix3_from_derived_euler_angle_x_f32" "linalg.matrix3_from_derived_euler_angle_x_f64" "linalg.matrix3_from_derived_euler_angle_y_f16" "linalg.matrix3_from_derived_euler_angle_y_f32" "linalg.matrix3_from_derived_euler_angle_y_f64" "linalg.matrix3_from_derived_euler_angle_z_f16" "linalg.matrix3_from_derived_euler_angle_z_f32" "linalg.matrix3_from_derived_euler_angle_z_f64" "linalg.matrix3_from_euler_angle_x_f16" "linalg.matrix3_from_euler_angle_x_f32" "linalg.matrix3_from_euler_angle_x_f64" "linalg.matrix3_from_euler_angle_y_f16" "linalg.matrix3_from_euler_angle_y_f32" "linalg.matrix3_from_euler_angle_y_f64" "linalg.matrix3_from_euler_angle_z_f16" "linalg.matrix3_from_euler_angle_z_f32" "linalg.matrix3_from_euler_angle_z_f64" "linalg.matrix3_from_euler_angles_f16" "linalg.matrix3_from_euler_angles_f32" "linalg.matrix3_from_euler_angles_f64" "linalg.matrix3_from_euler_angles_xy_f16" "linalg.matrix3_from_euler_angles_xy_f32" "linalg.matrix3_from_euler_angles_xy_f64" "linalg.matrix3_from_euler_angles_xyx_f16" "linalg.matrix3_from_euler_angles_xyx_f32" "linalg.matrix3_from_euler_angles_xyx_f64" "linalg.matrix3_from_euler_angles_xyz_f16" "linalg.matrix3_from_euler_angles_xyz_f32" "linalg.matrix3_from_euler_angles_xyz_f64" "linalg.matrix3_from_euler_angles_xz_f16" "linalg.matrix3_from_euler_angles_xz_f32" "linalg.matrix3_from_euler_angles_xz_f64" "linalg.matrix3_from_euler_angles_xzx_f16" "linalg.matrix3_from_euler_angles_xzx_f32" "linalg.matrix3_from_euler_angles_xzx_f64" "linalg.matrix3_from_euler_angles_xzy_f16" "linalg.matrix3_from_euler_angles_xzy_f32" "linalg.matrix3_from_euler_angles_xzy_f64" "linalg.matrix3_from_euler_angles_yx_f16" "linalg.matrix3_from_euler_angles_yx_f32" "linalg.matrix3_from_euler_angles_yx_f64" "linalg.matrix3_from_euler_angles_yxy_f16" "linalg.matrix3_from_euler_angles_yxy_f32" "linalg.matrix3_from_euler_angles_yxy_f64" "linalg.matrix3_from_euler_angles_yxz_f16" "linalg.matrix3_from_euler_angles_yxz_f32" "linalg.matrix3_from_euler_angles_yxz_f64" "linalg.matrix3_from_euler_angles_yz_f16" "linalg.matrix3_from_euler_angles_yz_f32" "linalg.matrix3_from_euler_angles_yz_f64" "linalg.matrix3_from_euler_angles_yzx_f16" "linalg.matrix3_from_euler_angles_yzx_f32" "linalg.matrix3_from_euler_angles_yzx_f64" "linalg.matrix3_from_euler_angles_yzy_f16" "linalg.matrix3_from_euler_angles_yzy_f32" "linalg.matrix3_from_euler_angles_yzy_f64" "linalg.matrix3_from_euler_angles_zx_f16" "linalg.matrix3_from_euler_angles_zx_f32" "linalg.matrix3_from_euler_angles_zx_f64" "linalg.matrix3_from_euler_angles_zxy_f16" "linalg.matrix3_from_euler_angles_zxy_f32" "linalg.matrix3_from_euler_angles_zxy_f64" "linalg.matrix3_from_euler_angles_zxz_f16" "linalg.matrix3_from_euler_angles_zxz_f32" "linalg.matrix3_from_euler_angles_zxz_f64" "linalg.matrix3_from_euler_angles_zy_f16" "linalg.matrix3_from_euler_angles_zy_f32" "linalg.matrix3_from_euler_angles_zy_f64" "linalg.matrix3_from_euler_angles_zyx_f16" "linalg.matrix3_from_euler_angles_zyx_f32" "linalg.matrix3_from_euler_angles_zyx_f64" "linalg.matrix3_from_euler_angles_zyz_f16" "linalg.matrix3_from_euler_angles_zyz_f32" "linalg.matrix3_from_euler_angles_zyz_f64" "linalg.matrix3_from_matrix2_f16" "linalg.matrix3_from_matrix2_f32" "linalg.matrix3_from_matrix2_f64" "linalg.matrix3_from_matrix4_f16" "linalg.matrix3_from_matrix4_f32" "linalg.matrix3_from_matrix4_f64" "linalg.matrix3_from_quaternion_f16" "linalg.matrix3_from_quaternion_f32" "linalg.matrix3_from_quaternion_f64" "linalg.matrix3_from_scalar_f16" "linalg.matrix3_from_scalar_f32" "linalg.matrix3_from_scalar_f64" "linalg.matrix3_from_yaw_pitch_roll_f16" "linalg.matrix3_from_yaw_pitch_roll_f32" "linalg.matrix3_from_yaw_pitch_roll_f64" "linalg.matrix3_inverse_f16" "linalg.matrix3_inverse_f32" "linalg.matrix3_inverse_f64" "linalg.matrix3_inverse_transpose_f16" "linalg.matrix3_inverse_transpose_f32" "linalg.matrix3_inverse_transpose_f64" "linalg.matrix3_look_at_f16" "linalg.matrix3_look_at_f32" "linalg.matrix3_look_at_f64" "linalg.matrix3_orthonormalize_f16" "linalg.matrix3_orthonormalize_f32" "linalg.matrix3_orthonormalize_f64" "linalg.matrix3_rotate_f16" "linalg.matrix3_rotate_f32" "linalg.matrix3_rotate_f64" "linalg.matrix3_scale_f16" "linalg.matrix3_scale_f32" "linalg.matrix3_scale_f64" "linalg.matrix4_adjoint_f16" "linalg.matrix4_adjoint_f32" "linalg.matrix4_adjoint_f64" "linalg.matrix4_cofactor_f16" "linalg.matrix4_cofactor_f32" "linalg.matrix4_cofactor_f64" "linalg.matrix4_determinant_f16" "linalg.matrix4_determinant_f32" "linalg.matrix4_determinant_f64" "linalg.matrix4_from_derived_euler_angle_x_f16" "linalg.matrix4_from_derived_euler_angle_x_f32" "linalg.matrix4_from_derived_euler_angle_x_f64" "linalg.matrix4_from_derived_euler_angle_y_f16" "linalg.matrix4_from_derived_euler_angle_y_f32" "linalg.matrix4_from_derived_euler_angle_y_f64" "linalg.matrix4_from_derived_euler_angle_z_f16" "linalg.matrix4_from_derived_euler_angle_z_f32" "linalg.matrix4_from_derived_euler_angle_z_f64" "linalg.matrix4_from_euler_angle_x_f16" "linalg.matrix4_from_euler_angle_x_f32" "linalg.matrix4_from_euler_angle_x_f64" "linalg.matrix4_from_euler_angle_y_f16" "linalg.matrix4_from_euler_angle_y_f32" "linalg.matrix4_from_euler_angle_y_f64" "linalg.matrix4_from_euler_angle_z_f16" "linalg.matrix4_from_euler_angle_z_f32" "linalg.matrix4_from_euler_angle_z_f64" "linalg.matrix4_from_euler_angles_f16" "linalg.matrix4_from_euler_angles_f32" "linalg.matrix4_from_euler_angles_f64" "linalg.matrix4_from_euler_angles_xy_f16" "linalg.matrix4_from_euler_angles_xy_f32" "linalg.matrix4_from_euler_angles_xy_f64" "linalg.matrix4_from_euler_angles_xyx_f16" "linalg.matrix4_from_euler_angles_xyx_f32" "linalg.matrix4_from_euler_angles_xyx_f64" "linalg.matrix4_from_euler_angles_xyz_f16" "linalg.matrix4_from_euler_angles_xyz_f32" "linalg.matrix4_from_euler_angles_xyz_f64" "linalg.matrix4_from_euler_angles_xz_f16" "linalg.matrix4_from_euler_angles_xz_f32" "linalg.matrix4_from_euler_angles_xz_f64" "linalg.matrix4_from_euler_angles_xzx_f16" "linalg.matrix4_from_euler_angles_xzx_f32" "linalg.matrix4_from_euler_angles_xzx_f64" "linalg.matrix4_from_euler_angles_xzy_f16" "linalg.matrix4_from_euler_angles_xzy_f32" "linalg.matrix4_from_euler_angles_xzy_f64" "linalg.matrix4_from_euler_angles_yx_f16" "linalg.matrix4_from_euler_angles_yx_f32" "linalg.matrix4_from_euler_angles_yx_f64" "linalg.matrix4_from_euler_angles_yxy_f16" "linalg.matrix4_from_euler_angles_yxy_f32" "linalg.matrix4_from_euler_angles_yxy_f64" "linalg.matrix4_from_euler_angles_yxz_f16" "linalg.matrix4_from_euler_angles_yxz_f32" "linalg.matrix4_from_euler_angles_yxz_f64" "linalg.matrix4_from_euler_angles_yz_f16" "linalg.matrix4_from_euler_angles_yz_f32" "linalg.matrix4_from_euler_angles_yz_f64" "linalg.matrix4_from_euler_angles_yzx_f16" "linalg.matrix4_from_euler_angles_yzx_f32" "linalg.matrix4_from_euler_angles_yzx_f64" "linalg.matrix4_from_euler_angles_yzy_f16" "linalg.matrix4_from_euler_angles_yzy_f32" "linalg.matrix4_from_euler_angles_yzy_f64" "linalg.matrix4_from_euler_angles_zx_f16" "linalg.matrix4_from_euler_angles_zx_f32" "linalg.matrix4_from_euler_angles_zx_f64" "linalg.matrix4_from_euler_angles_zxy_f16" "linalg.matrix4_from_euler_angles_zxy_f32" "linalg.matrix4_from_euler_angles_zxy_f64" "linalg.matrix4_from_euler_angles_zxz_f16" "linalg.matrix4_from_euler_angles_zxz_f32" "linalg.matrix4_from_euler_angles_zxz_f64" "linalg.matrix4_from_euler_angles_zy_f16" "linalg.matrix4_from_euler_angles_zy_f32" "linalg.matrix4_from_euler_angles_zy_f64" "linalg.matrix4_from_euler_angles_zyx_f16" "linalg.matrix4_from_euler_angles_zyx_f32" "linalg.matrix4_from_euler_angles_zyx_f64" "linalg.matrix4_from_euler_angles_zyz_f16" "linalg.matrix4_from_euler_angles_zyz_f32" "linalg.matrix4_from_euler_angles_zyz_f64" "linalg.matrix4_from_matrix2_f16" "linalg.matrix4_from_matrix2_f32" "linalg.matrix4_from_matrix2_f64" "linalg.matrix4_from_matrix3_f16" "linalg.matrix4_from_matrix3_f32" "linalg.matrix4_from_matrix3_f64" "linalg.matrix4_from_quaternion_f16" "linalg.matrix4_from_quaternion_f32" "linalg.matrix4_from_quaternion_f64" "linalg.matrix4_from_scalar_f16" "linalg.matrix4_from_scalar_f32" "linalg.matrix4_from_scalar_f64" "linalg.matrix4_from_trs_f16" "linalg.matrix4_from_trs_f32" "linalg.matrix4_from_trs_f64" "linalg.matrix4_from_yaw_pitch_roll_f16" "linalg.matrix4_from_yaw_pitch_roll_f32" "linalg.matrix4_from_yaw_pitch_roll_f64" "linalg.matrix4_infinite_perspective_f16" "linalg.matrix4_infinite_perspective_f32" "linalg.matrix4_infinite_perspective_f64" "linalg.matrix4_inverse_f16" "linalg.matrix4_inverse_f32" "linalg.matrix4_inverse_f64" "linalg.matrix4_inverse_transpose_f16" "linalg.matrix4_inverse_transpose_f32" "linalg.matrix4_inverse_transpose_f64" "linalg.matrix4_look_at_f16" "linalg.matrix4_look_at_f32" "linalg.matrix4_look_at_f64" "linalg.matrix4_look_at_from_fru_f16" "linalg.matrix4_look_at_from_fru_f32" "linalg.matrix4_look_at_from_fru_f64" "linalg.matrix4_minor_f16" "linalg.matrix4_minor_f32" "linalg.matrix4_minor_f64" "linalg.matrix4_orientation_f16" "linalg.matrix4_orientation_f32" "linalg.matrix4_orientation_f64" "linalg.matrix4_perspective_f16" "linalg.matrix4_perspective_f32" "linalg.matrix4_perspective_f64" "linalg.matrix4_rotate_f16" "linalg.matrix4_rotate_f32" "linalg.matrix4_rotate_f64" "linalg.matrix4_scale_f16" "linalg.matrix4_scale_f32" "linalg.matrix4_scale_f64" "linalg.matrix4_translate_f16" "linalg.matrix4_translate_f32" "linalg.matrix4_translate_f64" "linalg.matrix_cast" "linalg.matrix_comp_mul" "linalg.matrix_mul_differ" "linalg.matrix_mul_vector" "linalg.matrix_mul" "linalg.matrix_ortho3d_f16" "linalg.matrix_ortho3d_f32" "linalg.matrix_ortho3d_f64" "linalg.matrix_to_ptr" "linalg.max_double" "linalg.max_single" "linalg.max_triple" "linalg.min_double" "linalg.min_single" "linalg.min_triple" "linalg.mix" "linalg.mod" "linalg.not_equal_array" "linalg.not_equal_single" "linalg.not" "linalg.outer_product" "linalg.pitch_from_quaternion_f16" "linalg.pitch_from_quaternion_f32" "linalg.pitch_from_quaternion_f64" "linalg.pitch_yaw_roll_from_quaternion_f16" "linalg.pitch_yaw_roll_from_quaternion_f32" "linalg.pitch_yaw_roll_from_quaternion_f64" "linalg.polar_from_euclidean_f16" "linalg.polar_from_euclidean_f32" "linalg.polar_from_euclidean_f64" "linalg.pow" "linalg.projection" "linalg.quaternion128_dot" "linalg.quaternion128_mul_vector3" "linalg.quaternion256_dot" "linalg.quaternion256_mul_vector3" "linalg.quaternion64_dot" "linalg.quaternion64_mul_vector3" "linalg.quaternion_angle_axis_f16" "linalg.quaternion_angle_axis_f32" "linalg.quaternion_angle_axis_f64" "linalg.quaternion_between_two_vector3_f16" "linalg.quaternion_between_two_vector3_f32" "linalg.quaternion_between_two_vector3_f64" "linalg.quaternion_cross" "linalg.quaternion_from_euler_angle_x_f16" "linalg.quaternion_from_euler_angle_x_f32" "linalg.quaternion_from_euler_angle_x_f64" "linalg.quaternion_from_euler_angle_y_f16" "linalg.quaternion_from_euler_angle_y_f32" "linalg.quaternion_from_euler_angle_y_f64" "linalg.quaternion_from_euler_angle_z_f16" "linalg.quaternion_from_euler_angle_z_f32" "linalg.quaternion_from_euler_angle_z_f64" "linalg.quaternion_from_euler_angles_f16" "linalg.quaternion_from_euler_angles_f32" "linalg.quaternion_from_euler_angles_f64" "linalg.quaternion_from_forward_and_up_f16" "linalg.quaternion_from_forward_and_up_f32" "linalg.quaternion_from_forward_and_up_f64" "linalg.quaternion_from_matrix3_f16" "linalg.quaternion_from_matrix3_f32" "linalg.quaternion_from_matrix3_f64" "linalg.quaternion_from_matrix4_f16" "linalg.quaternion_from_matrix4_f32" "linalg.quaternion_from_matrix4_f64" "linalg.quaternion_from_pitch_yaw_roll_f16" "linalg.quaternion_from_pitch_yaw_roll_f32" "linalg.quaternion_from_pitch_yaw_roll_f64" "linalg.quaternion_from_scalar_f16" "linalg.quaternion_from_scalar_f32" "linalg.quaternion_from_scalar_f64" "linalg.quaternion_inverse" "linalg.quaternion_length2" "linalg.quaternion_length" "linalg.quaternion_look_at_f16" "linalg.quaternion_look_at_f32" "linalg.quaternion_look_at_f64" "linalg.quaternion_mul_quaternion" "linalg.quaternion_nlerp_f16" "linalg.quaternion_nlerp_f32" "linalg.quaternion_nlerp_f64" "linalg.quaternion_normalize0" "linalg.quaternion_normalize" "linalg.quaternion_slerp_f16" "linalg.quaternion_slerp_f32" "linalg.quaternion_slerp_f64" "linalg.quaternion_squad_f16" "linalg.quaternion_squad_f32" "linalg.quaternion_squad_f64" "linalg.radians" "linalg.reflect" "linalg.refract" "linalg.roll_from_quaternion_f16" "linalg.roll_from_quaternion_f32" "linalg.roll_from_quaternion_f64" "linalg.round" "linalg.saturate" "linalg.scalar_cross" "linalg.scalar_dot" "linalg.scalar_f32_swizzle1" "linalg.scalar_f32_swizzle2" "linalg.scalar_f32_swizzle3" "linalg.scalar_f32_swizzle4" "linalg.scalar_f64_swizzle1" "linalg.scalar_f64_swizzle2" "linalg.scalar_f64_swizzle3" "linalg.scalar_f64_swizzle4" "linalg.scalar_triple_product" "linalg.sign" "linalg.sin" "linalg.smootherstep" "linalg.smoothstep" "linalg.sqrt" "linalg.step" "linalg.tan" "linalg.to_complex128" "linalg.to_complex32" "linalg.to_complex64" "linalg.to_f32" "linalg.to_f64" "linalg.to_i16" "linalg.to_i32" "linalg.to_i64" "linalg.to_i8" "linalg.to_int" "linalg.to_quaternion128" "linalg.to_quaternion256" "linalg.to_quaternion64" "linalg.to_u16" "linalg.to_u32" "linalg.to_u64" "linalg.to_u8" "linalg.to_uint" "linalg.transpose" "linalg.unlerp" "linalg.vector2_orthogonal" "linalg.vector2f32_swizzle1" "linalg.vector2f32_swizzle2" "linalg.vector2f32_swizzle3" "linalg.vector2f32_swizzle4" "linalg.vector2f64_swizzle1" "linalg.vector2f64_swizzle2" "linalg.vector2f64_swizzle3" "linalg.vector2f64_swizzle4" "linalg.vector3_orthogonal" "linalg.vector3_orthonormalize_f16" "linalg.vector3_orthonormalize_f32" "linalg.vector3_orthonormalize_f64" "linalg.vector3f32_swizzle1" "linalg.vector3f32_swizzle2" "linalg.vector3f32_swizzle3" "linalg.vector3f32_swizzle4" "linalg.vector3f64_swizzle1" "linalg.vector3f64_swizzle2" "linalg.vector3f64_swizzle3" "linalg.vector3f64_swizzle4" "linalg.vector4_hsl_to_rgb_f16" "linalg.vector4_hsl_to_rgb_f32" "linalg.vector4_hsl_to_rgb_f64" "linalg.vector4_linear_to_srgb_f16" "linalg.vector4_linear_to_srgb_f32" "linalg.vector4_linear_to_srgb_f64" "linalg.vector4_rgb_to_hsl_f16" "linalg.vector4_rgb_to_hsl_f32" "linalg.vector4_rgb_to_hsl_f64" "linalg.vector4_srgb_to_linear_f16" "linalg.vector4_srgb_to_linear_f32" "linalg.vector4_srgb_to_linear_f64" "linalg.vector4f32_swizzle1" "linalg.vector4f32_swizzle2" "linalg.vector4f32_swizzle3" "linalg.vector4f32_swizzle4" "linalg.vector4f64_swizzle1" "linalg.vector4f64_swizzle2" "linalg.vector4f64_swizzle3" "linalg.vector4f64_swizzle4" "linalg.vector_cross2" "linalg.vector_cross3" "linalg.vector_dot" "linalg.vector_length" "linalg.vector_length2" "linalg.vector_normalize0" "linalg.vector_normalize" "linalg.vector_slerp" "linalg.vector_to_ptr" "linalg.vector_triple_product" "linalg.yaw_from_quaternion_f16" "linalg.yaw_from_quaternion_f32" "linalg.yaw_from_quaternion_f64" "linalg.angle_axis_from_quaternion" "linalg.angle_from_quaternion" "linalg.axis_from_quaternion" "linalg.classify" "linalg.cross" "linalg.dot" "linalg.equal" "linalg.euclidean_from_polar" "linalg.euler_angles_from_matrix3" "linalg.euler_angles_from_matrix4" "linalg.euler_angles_from_quaternion" "linalg.euler_angles_xyx_from_matrix3" "linalg.euler_angles_xyx_from_matrix4" "linalg.euler_angles_xyx_from_quaternion" "linalg.euler_angles_xyz_from_matrix3" "linalg.euler_angles_xyz_from_matrix4" "linalg.euler_angles_xyz_from_quaternion" "linalg.euler_angles_xzx_from_matrix3" "linalg.euler_angles_xzx_from_matrix4" "linalg.euler_angles_xzx_from_quaternion" "linalg.euler_angles_xzy_from_matrix3" "linalg.euler_angles_xzy_from_matrix4" "linalg.euler_angles_xzy_from_quaternion" "linalg.euler_angles_yxy_from_matrix3" "linalg.euler_angles_yxy_from_matrix4" "linalg.euler_angles_yxy_from_quaternion" "linalg.euler_angles_yxz_from_matrix3" "linalg.euler_angles_yxz_from_matrix4" "linalg.euler_angles_yxz_from_quaternion" "linalg.euler_angles_yzx_from_matrix3" "linalg.euler_angles_yzx_from_matrix4" "linalg.euler_angles_yzx_from_quaternion" "linalg.euler_angles_yzy_from_matrix3" "linalg.euler_angles_yzy_from_matrix4" "linalg.euler_angles_yzy_from_quaternion" "linalg.euler_angles_zxy_from_matrix3" "linalg.euler_angles_zxy_from_matrix4" "linalg.euler_angles_zxy_from_quaternion" "linalg.euler_angles_zxz_from_matrix3" "linalg.euler_angles_zxz_from_matrix4" "linalg.euler_angles_zxz_from_quaternion" "linalg.euler_angles_zyx_from_matrix3" "linalg.euler_angles_zyx_from_matrix4" "linalg.euler_angles_zyx_from_quaternion" "linalg.euler_angles_zyz_from_matrix3" "linalg.euler_angles_zyz_from_matrix4" "linalg.euler_angles_zyz_from_quaternion" "linalg.greater_than" "linalg.greater_than_equal" "linalg.inner_product" "linalg.is_inf" "linalg.is_nan" "linalg.length" "linalg.length2" "linalg.less_than" "linalg.less_than_equal" "linalg.matrix2_adjoint" "linalg.matrix2_determinant" "linalg.matrix2_from_matrix3" "linalg.matrix2_from_matrix4" "linalg.matrix2_from_scalar" "linalg.matrix2_inverse" "linalg.matrix2_inverse_transpose" "linalg.matrix2_orthonormalize" "linalg.matrix3_adjoint" "linalg.matrix3_determinant" "linalg.matrix3_from_derived_euler_angle_x" "linalg.matrix3_from_derived_euler_angle_y" "linalg.matrix3_from_derived_euler_angle_z" "linalg.matrix3_from_euler_angle_x" "linalg.matrix3_from_euler_angle_y" "linalg.matrix3_from_euler_angle_z" "linalg.matrix3_from_euler_angles_xyz" "linalg.matrix3_from_euler_angles" "linalg.matrix3_from_euler_angles_xyx" "linalg.matrix3_from_euler_angles_xy" "linalg.matrix3_from_euler_angles_xz" "linalg.matrix3_from_euler_angles_xzx" "linalg.matrix3_from_euler_angles_xzy" "linalg.matrix3_from_euler_angles_yxy" "linalg.matrix3_from_euler_angles_yxz" "linalg.matrix3_from_euler_angles_yx" "linalg.matrix3_from_euler_angles_yzx" "linalg.matrix3_from_euler_angles_yz" "linalg.matrix3_from_euler_angles_yzy" "linalg.matrix3_from_euler_angles_zx" "linalg.matrix3_from_euler_angles_zxy" "linalg.matrix3_from_euler_angles_zxz" "linalg.matrix3_from_euler_angles_zy" "linalg.matrix3_from_euler_angles_zyx" "linalg.matrix3_from_euler_angles_zyz" "linalg.matrix3_from_matrix2" "linalg.matrix3_from_matrix4" "linalg.matrix3_from_quaternion" "linalg.matrix3_from_scalar" "linalg.matrix3_from_yaw_pitch_roll" "linalg.matrix3_inverse" "linalg.matrix3_inverse_transpose" "linalg.matrix3_look_at" "linalg.matrix3_orthonormalize" "linalg.matrix3_rotate" "linalg.matrix3_scale" "linalg.matrix4_adjoint" "linalg.matrix4_cofactor" "linalg.matrix4_determinant" "linalg.matrix4_from_derived_euler_angle_x" "linalg.matrix4_from_derived_euler_angle_y" "linalg.matrix4_from_derived_euler_angle_z" "linalg.matrix4_from_euler_angle_x" "linalg.matrix4_from_euler_angle_y" "linalg.matrix4_from_euler_angle_z" "linalg.matrix4_from_euler_angles_xyx" "linalg.matrix4_from_euler_angles" "linalg.matrix4_from_euler_angles_xyz" "linalg.matrix4_from_euler_angles_xy" "linalg.matrix4_from_euler_angles_xz" "linalg.matrix4_from_euler_angles_xzx" "linalg.matrix4_from_euler_angles_xzy" "linalg.matrix4_from_euler_angles_yx" "linalg.matrix4_from_euler_angles_yxy" "linalg.matrix4_from_euler_angles_yxz" "linalg.matrix4_from_euler_angles_yz" "linalg.matrix4_from_euler_angles_yzx" "linalg.matrix4_from_euler_angles_yzy" "linalg.matrix4_from_euler_angles_zx" "linalg.matrix4_from_euler_angles_zxy" "linalg.matrix4_from_euler_angles_zxz" "linalg.matrix4_from_euler_angles_zyx" "linalg.matrix4_from_euler_angles_zyz" "linalg.matrix4_from_euler_angles_zy" "linalg.matrix4_from_matrix2" "linalg.matrix4_from_matrix3" "linalg.matrix4_from_quaternion" "linalg.matrix4_from_scalar" "linalg.matrix4_from_trs" "linalg.matrix4_from_yaw_pitch_roll" "linalg.matrix4_infinite_perspective" "linalg.matrix4_inverse_transpose" "linalg.matrix4_inverse" "linalg.matrix4_look_at_from_fru" "linalg.matrix4_look_at" "linalg.matrix4_minor" "linalg.matrix4_orientation" "linalg.matrix4_perspective" "linalg.matrix4_rotate" "linalg.matrix4_scale" "linalg.matrix4_translate" "linalg.matrix_ortho3d" "linalg.max" "linalg.min" "linalg.mul" "linalg.normalize" "linalg.normalize0" "linalg.not_equal" "linalg.orthogonal" "linalg.orthonormalize" "linalg.pitch_from_quaternion" "linalg.pitch_yaw_roll_from_quaternion" "linalg.polar_from_euclidean" "linalg.quaternion_angle_axis" "linalg.quaternion_between_two_vector3" "linalg.quaternion_from_euler_angle_x" "linalg.quaternion_from_euler_angle_y" "linalg.quaternion_from_euler_angle_z" "linalg.quaternion_from_euler_angles" "linalg.quaternion_from_forward_and_up" "linalg.quaternion_from_matrix3" "linalg.quaternion_from_matrix4" "linalg.quaternion_from_pitch_yaw_roll" "linalg.quaternion_from_scalar" "linalg.quaternion_look_at" "linalg.quaternion_mul_vector3" "linalg.quaternion_nlerp" "linalg.quaternion_slerp" "linalg.quaternion_squad" "linalg.roll_from_quaternion" "linalg.scalar_swizzle" "linalg.swizzle" "linalg.to_matrix2f" "linalg.to_matrix2f16" "linalg.to_matrix2f32" "linalg.to_matrix2f64" "linalg.to_matrix3f16" "linalg.to_matrix3f32" "linalg.to_matrix3f64" "linalg.to_matrix3" "linalg.to_matrix4" "linalg.to_matrix4f16" "linalg.to_matrix4f32" "linalg.to_matrix4f64" "linalg.to_ptr" "linalg.to_quaternion" "linalg.to_quaternionf64" "linalg.to_quaternionf32" "linalg.to_quaternionf16" "linalg.vector2_swizzle" "linalg.vector3_orthonormalize" "linalg.vector3_swizzle" "linalg.vector4_hsl_to_rgb" "linalg.vector4_linear_to_srgb" "linalg.vector4_rgb_to_hsl" "linalg.vector4_srgb_to_linear" "linalg.vector4_swizzle" "linalg.vector_cross" "linalg.yaw_from_quaternion"))

(setq odin-linalg/glsl-types '( "bvec2" "bvec3" "bvec4" "dmat2" "dmat2x2" "dmat2x3" "dmat2x4" "dmat3" "dmat3x2" "dmat3x3" "dmat3x4" "dmat4x2" "dmat4x3" "dmat4" "dmat4x4" "dquat" "dvec2" "dvec3" "dvec4" "ivec2" "ivec3" "ivec4" "mat2" "mat2x2" "mat2x3" "mat2x4" "mat3x2" "mat3x3" "mat3" "mat3x4" "mat4" "mat4x2" "mat4x3" "mat4x4" "quat" "uvec2" "uvec3" "uvec4" "vec2" "vec3" "vec4"))

 (setq odin-linalg/glsl-proc '( "linalg/glsl.abs_dvec2" "linalg/glsl.abs_dvec3" "linalg/glsl.abs_dvec4" "linalg/glsl.abs_f32" "linalg/glsl.abs_f64" "linalg/glsl.abs_i32" "linalg/glsl.abs_ivec2" "linalg/glsl.abs_ivec3" "linalg/glsl.abs_ivec4" "linalg/glsl.abs_u32" "linalg/glsl.abs_uvec2" "linalg/glsl.abs_uvec3" "linalg/glsl.abs_uvec4" "linalg/glsl.abs_vec2" "linalg/glsl.abs_vec3" "linalg/glsl.abs_vec4" "linalg/glsl.acos_dvec2" "linalg/glsl.acos_dvec3" "linalg/glsl.acos_dvec4" "linalg/glsl.acos_f32" "linalg/glsl.acos_f64" "linalg/glsl.acos_vec2" "linalg/glsl.acos_vec3" "linalg/glsl.acos_vec4" "linalg/glsl.acosh_dvec2" "linalg/glsl.acosh_dvec3" "linalg/glsl.acosh_dvec4" "linalg/glsl.acosh_f32" "linalg/glsl.acosh_f64" "linalg/glsl.acosh_vec2" "linalg/glsl.acosh_vec3" "linalg/glsl.acosh_vec4" "linalg/glsl.all_bool" "linalg/glsl.all_bvec2" "linalg/glsl.all_bvec3" "linalg/glsl.all_bvec4" "linalg/glsl.any_bool" "linalg/glsl.any_bvec2" "linalg/glsl.any_bvec3" "linalg/glsl.any_bvec4" "linalg/glsl.asin_dvec2" "linalg/glsl.asin_dvec3" "linalg/glsl.asin_dvec4" "linalg/glsl.asin_f32" "linalg/glsl.asin_f64" "linalg/glsl.asin_vec2" "linalg/glsl.asin_vec3" "linalg/glsl.asin_vec4" "linalg/glsl.asinh_dvec2" "linalg/glsl.asinh_dvec3" "linalg/glsl.asinh_dvec4" "linalg/glsl.asinh_f32" "linalg/glsl.asinh_f64" "linalg/glsl.asinh_vec2" "linalg/glsl.asinh_vec3" "linalg/glsl.asinh_vec4" "linalg/glsl.atan2_dvec2" "linalg/glsl.atan2_dvec3" "linalg/glsl.atan2_dvec4" "linalg/glsl.atan2_f32" "linalg/glsl.atan2_f64" "linalg/glsl.atan2_vec2" "linalg/glsl.atan2_vec3" "linalg/glsl.atan2_vec4" "linalg/glsl.atan_dvec2" "linalg/glsl.atan_dvec3" "linalg/glsl.atan_dvec4" "linalg/glsl.atan_f32" "linalg/glsl.atan_f64" "linalg/glsl.atan_vec2" "linalg/glsl.atan_vec3" "linalg/glsl.atan_vec4" "linalg/glsl.atanh_dvec2" "linalg/glsl.atanh_dvec3" "linalg/glsl.atanh_dvec4" "linalg/glsl.atanh_f32" "linalg/glsl.atanh_f64" "linalg/glsl.atanh_vec2" "linalg/glsl.atanh_vec3" "linalg/glsl.atanh_vec4" "linalg/glsl.ceil_dvec2" "linalg/glsl.ceil_dvec3" "linalg/glsl.ceil_dvec4" "linalg/glsl.ceil_f32" "linalg/glsl.ceil_f64" "linalg/glsl.ceil_vec2" "linalg/glsl.ceil_vec3" "linalg/glsl.ceil_vec4" "linalg/glsl.clamp_dvec2" "linalg/glsl.clamp_dvec3" "linalg/glsl.clamp_dvec4" "linalg/glsl.clamp_f32" "linalg/glsl.clamp_f64" "linalg/glsl.clamp_i32" "linalg/glsl.clamp_ivec2" "linalg/glsl.clamp_ivec3" "linalg/glsl.clamp_ivec4" "linalg/glsl.clamp_u32" "linalg/glsl.clamp_uvec2" "linalg/glsl.clamp_uvec3" "linalg/glsl.clamp_uvec4" "linalg/glsl.clamp_vec2" "linalg/glsl.clamp_vec3" "linalg/glsl.clamp_vec4" "linalg/glsl.cos_dvec2" "linalg/glsl.cos_dvec3" "linalg/glsl.cos_dvec4" "linalg/glsl.cos_f32" "linalg/glsl.cos_f64" "linalg/glsl.cos_vec2" "linalg/glsl.cos_vec3" "linalg/glsl.cos_vec4" "linalg/glsl.cosh_dvec2" "linalg/glsl.cosh_dvec3" "linalg/glsl.cosh_dvec4" "linalg/glsl.cosh_f32" "linalg/glsl.cosh_f64" "linalg/glsl.cosh_vec2" "linalg/glsl.cosh_vec3" "linalg/glsl.cosh_vec4" "linalg/glsl.cross_dvec3" "linalg/glsl.cross_ivec3" "linalg/glsl.cross_vec3" "linalg/glsl.degrees_dvec2" "linalg/glsl.degrees_dvec3" "linalg/glsl.degrees_dvec4" "linalg/glsl.degrees_f32" "linalg/glsl.degrees_f64" "linalg/glsl.degrees_vec2" "linalg/glsl.degrees_vec3" "linalg/glsl.degrees_vec4" "linalg/glsl.distance_dvec2" "linalg/glsl.distance_dvec3" "linalg/glsl.distance_dvec4" "linalg/glsl.distance_f32" "linalg/glsl.distance_f64" "linalg/glsl.distance_vec2" "linalg/glsl.distance_vec3" "linalg/glsl.distance_vec4" "linalg/glsl.dmat4FromDquat" "linalg/glsl.dmat4LookAt" "linalg/glsl.dmat4Orientation" "linalg/glsl.dmat4Ortho3d" "linalg/glsl.dmat4Perspective" "linalg/glsl.dmat4PerspectiveInfinite" "linalg/glsl.dmat4Rotate" "linalg/glsl.dmat4Scale" "linalg/glsl.dmat4Translate" "linalg/glsl.dot_dquat" "linalg/glsl.dot_dvec2" "linalg/glsl.dot_dvec3" "linalg/glsl.dot_dvec4" "linalg/glsl.dot_f32" "linalg/glsl.dot_f64" "linalg/glsl.dot_i32" "linalg/glsl.dot_ivec2" "linalg/glsl.dot_ivec3" "linalg/glsl.dot_ivec4" "linalg/glsl.dot_quat" "linalg/glsl.dot_u32" "linalg/glsl.dot_uvec2" "linalg/glsl.dot_uvec3" "linalg/glsl.dot_uvec4" "linalg/glsl.dot_vec2" "linalg/glsl.dot_vec3" "linalg/glsl.dot_vec4" "linalg/glsl.dquatAxisAngle" "linalg/glsl.dquatFromDmat4" "linalg/glsl.dquatFromdMat3" "linalg/glsl.dquatMulDvec3" "linalg/glsl.dquatNlerp" "linalg/glsl.dquatSlerp" "linalg/glsl.equal_dvec2" "linalg/glsl.equal_dvec3" "linalg/glsl.equal_dvec4" "linalg/glsl.equal_f32" "linalg/glsl.equal_f64" "linalg/glsl.equal_i32" "linalg/glsl.equal_ivec2" "linalg/glsl.equal_ivec3" "linalg/glsl.equal_ivec4" "linalg/glsl.equal_u32" "linalg/glsl.equal_uvec2" "linalg/glsl.equal_uvec3" "linalg/glsl.equal_uvec4" "linalg/glsl.equal_vec2" "linalg/glsl.equal_vec3" "linalg/glsl.equal_vec4" "linalg/glsl.exp2_dvec2" "linalg/glsl.exp2_dvec3" "linalg/glsl.exp2_dvec4" "linalg/glsl.exp2_f32" "linalg/glsl.exp2_f64" "linalg/glsl.exp2_vec2" "linalg/glsl.exp2_vec3" "linalg/glsl.exp2_vec4" "linalg/glsl.exp_dvec2" "linalg/glsl.exp_dvec3" "linalg/glsl.exp_dvec4" "linalg/glsl.exp_f32" "linalg/glsl.exp_f64" "linalg/glsl.exp_vec2" "linalg/glsl.exp_vec3" "linalg/glsl.exp_vec4" "linalg/glsl.faceForward_dvec2" "linalg/glsl.faceForward_dvec3" "linalg/glsl.faceForward_dvec4" "linalg/glsl.faceForward_f32" "linalg/glsl.faceForward_f64" "linalg/glsl.faceForward_vec2" "linalg/glsl.faceForward_vec3" "linalg/glsl.faceForward_vec4" "linalg/glsl.floor_dvec2" "linalg/glsl.floor_dvec3" "linalg/glsl.floor_dvec4" "linalg/glsl.floor_f32" "linalg/glsl.floor_f64" "linalg/glsl.floor_vec2" "linalg/glsl.floor_vec3" "linalg/glsl.floor_vec4" "linalg/glsl.fract_dvec2" "linalg/glsl.fract_dvec3" "linalg/glsl.fract_dvec4" "linalg/glsl.fract_f32" "linalg/glsl.fract_f64" "linalg/glsl.fract_vec2" "linalg/glsl.fract_vec3" "linalg/glsl.fract_vec4" "linalg/glsl.greaterThanEqual_dvec2" "linalg/glsl.greaterThanEqual_dvec3" "linalg/glsl.greaterThanEqual_dvec4" "linalg/glsl.greaterThanEqual_f32" "linalg/glsl.greaterThanEqual_f64" "linalg/glsl.greaterThanEqual_i32" "linalg/glsl.greaterThanEqual_ivec2" "linalg/glsl.greaterThanEqual_ivec3" "linalg/glsl.greaterThanEqual_ivec4" "linalg/glsl.greaterThanEqual_u32" "linalg/glsl.greaterThanEqual_uvec2" "linalg/glsl.greaterThanEqual_uvec3" "linalg/glsl.greaterThanEqual_uvec4" "linalg/glsl.greaterThanEqual_vec2" "linalg/glsl.greaterThanEqual_vec3" "linalg/glsl.greaterThanEqual_vec4" "linalg/glsl.greaterThan_dvec2" "linalg/glsl.greaterThan_dvec3" "linalg/glsl.greaterThan_dvec4" "linalg/glsl.greaterThan_f32" "linalg/glsl.greaterThan_f64" "linalg/glsl.greaterThan_i32" "linalg/glsl.greaterThan_ivec2" "linalg/glsl.greaterThan_ivec3" "linalg/glsl.greaterThan_ivec4" "linalg/glsl.greaterThan_u32" "linalg/glsl.greaterThan_uvec2" "linalg/glsl.greaterThan_uvec3" "linalg/glsl.greaterThan_uvec4" "linalg/glsl.greaterThan_vec2" "linalg/glsl.greaterThan_vec3" "linalg/glsl.greaterThan_vec4" "linalg/glsl.identity" "linalg/glsl.inverse_dmat2" "linalg/glsl.inverse_dmat3" "linalg/glsl.inverse_dmat4" "linalg/glsl.inverse_dquat" "linalg/glsl.inverse_mat2" "linalg/glsl.inverse_mat3" "linalg/glsl.inverse_mat4" "linalg/glsl.inverse_quat" "linalg/glsl.inversesqrt_dvec2" "linalg/glsl.inversesqrt_dvec3" "linalg/glsl.inversesqrt_dvec4" "linalg/glsl.inversesqrt_f32" "linalg/glsl.inversesqrt_f64" "linalg/glsl.inversesqrt_vec2" "linalg/glsl.inversesqrt_vec3" "linalg/glsl.inversesqrt_vec4" "linalg/glsl.length_dquat" "linalg/glsl.length_dvec2" "linalg/glsl.length_dvec3" "linalg/glsl.length_dvec4" "linalg/glsl.length_f32" "linalg/glsl.length_f64" "linalg/glsl.length_quat" "linalg/glsl.length_vec2" "linalg/glsl.length_vec3" "linalg/glsl.length_vec4" "linalg/glsl.lerp_dvec2" "linalg/glsl.lerp_dvec3" "linalg/glsl.lerp_dvec4" "linalg/glsl.lerp_f32" "linalg/glsl.lerp_f64" "linalg/glsl.lerp_vec2" "linalg/glsl.lerp_vec3" "linalg/glsl.lerp_vec4" "linalg/glsl.lessThanEqual_dvec2" "linalg/glsl.lessThanEqual_dvec3" "linalg/glsl.lessThanEqual_dvec4" "linalg/glsl.lessThanEqual_f32" "linalg/glsl.lessThanEqual_f64" "linalg/glsl.lessThanEqual_i32" "linalg/glsl.lessThanEqual_ivec2" "linalg/glsl.lessThanEqual_ivec3" "linalg/glsl.lessThanEqual_ivec4" "linalg/glsl.lessThanEqual_u32" "linalg/glsl.lessThanEqual_uvec2" "linalg/glsl.lessThanEqual_uvec3" "linalg/glsl.lessThanEqual_uvec4" "linalg/glsl.lessThanEqual_vec2" "linalg/glsl.lessThanEqual_vec3" "linalg/glsl.lessThanEqual_vec4" "linalg/glsl.lessThan_dvec2" "linalg/glsl.lessThan_dvec3" "linalg/glsl.lessThan_dvec4" "linalg/glsl.lessThan_f32" "linalg/glsl.lessThan_f64" "linalg/glsl.lessThan_i32" "linalg/glsl.lessThan_ivec2" "linalg/glsl.lessThan_ivec3" "linalg/glsl.lessThan_ivec4" "linalg/glsl.lessThan_u32" "linalg/glsl.lessThan_uvec2" "linalg/glsl.lessThan_uvec3" "linalg/glsl.lessThan_uvec4" "linalg/glsl.lessThan_vec2" "linalg/glsl.lessThan_vec3" "linalg/glsl.lessThan_vec4" "linalg/glsl.log_dvec2" "linalg/glsl.log_dvec3" "linalg/glsl.log_dvec4" "linalg/glsl.log_f32" "linalg/glsl.log_f64" "linalg/glsl.log_vec2" "linalg/glsl.log_vec3" "linalg/glsl.log_vec4" "linalg/glsl.mat4FromQuat" "linalg/glsl.mat4LookAt" "linalg/glsl.mat4Orientation" "linalg/glsl.mat4Ortho3d" "linalg/glsl.mat4PerspectiveInfinite" "linalg/glsl.mat4Perspective" "linalg/glsl.mat4Rotate" "linalg/glsl.mat4Scale" "linalg/glsl.mat4Translate" "linalg/glsl.max_dvec2" "linalg/glsl.max_dvec3" "linalg/glsl.max_dvec4" "linalg/glsl.max_f32" "linalg/glsl.max_f64" "linalg/glsl.max_i32" "linalg/glsl.max_ivec2" "linalg/glsl.max_ivec3" "linalg/glsl.max_ivec4" "linalg/glsl.max_u32" "linalg/glsl.max_uvec2" "linalg/glsl.max_uvec3" "linalg/glsl.max_uvec4" "linalg/glsl.max_vec2" "linalg/glsl.max_vec3" "linalg/glsl.max_vec4" "linalg/glsl.min_dvec2" "linalg/glsl.min_dvec3" "linalg/glsl.min_dvec4" "linalg/glsl.min_f32" "linalg/glsl.min_f64" "linalg/glsl.min_i32" "linalg/glsl.min_ivec2" "linalg/glsl.min_ivec3" "linalg/glsl.min_ivec4" "linalg/glsl.min_u32" "linalg/glsl.min_uvec2" "linalg/glsl.min_uvec3" "linalg/glsl.min_uvec4" "linalg/glsl.min_vec2" "linalg/glsl.min_vec3" "linalg/glsl.min_vec4" "linalg/glsl.mix_dvec2" "linalg/glsl.mix_dvec3" "linalg/glsl.mix_dvec4" "linalg/glsl.mix_f32" "linalg/glsl.mix_f64" "linalg/glsl.mix_vec2" "linalg/glsl.mix_vec3" "linalg/glsl.mix_vec4" "linalg/glsl.mod_dvec2" "linalg/glsl.mod_dvec3" "linalg/glsl.mod_dvec4" "linalg/glsl.mod_f32" "linalg/glsl.mod_f64" "linalg/glsl.mod_vec2" "linalg/glsl.mod_vec3" "linalg/glsl.mod_vec4" "linalg/glsl.normalize_dquat" "linalg/glsl.normalize_dvec2" "linalg/glsl.normalize_dvec3" "linalg/glsl.normalize_dvec4" "linalg/glsl.normalize_f32" "linalg/glsl.normalize_f64" "linalg/glsl.normalize_quat" "linalg/glsl.normalize_vec2" "linalg/glsl.normalize_vec3" "linalg/glsl.normalize_vec4" "linalg/glsl.notEqual_dvec2" "linalg/glsl.notEqual_dvec3" "linalg/glsl.notEqual_dvec4" "linalg/glsl.notEqual_f32" "linalg/glsl.notEqual_f64" "linalg/glsl.notEqual_i32" "linalg/glsl.notEqual_ivec2" "linalg/glsl.notEqual_ivec3" "linalg/glsl.notEqual_ivec4" "linalg/glsl.notEqual_u32" "linalg/glsl.notEqual_uvec2" "linalg/glsl.notEqual_uvec3" "linalg/glsl.notEqual_uvec4" "linalg/glsl.notEqual_vec2" "linalg/glsl.notEqual_vec3" "linalg/glsl.notEqual_vec4" "linalg/glsl.not_bool" "linalg/glsl.not_bvec2" "linalg/glsl.not_bvec3" "linalg/glsl.not_bvec4" "linalg/glsl.pow_dvec2" "linalg/glsl.pow_dvec3" "linalg/glsl.pow_dvec4" "linalg/glsl.pow_f32" "linalg/glsl.pow_f64" "linalg/glsl.pow_vec2" "linalg/glsl.pow_vec3" "linalg/glsl.pow_vec4" "linalg/glsl.quatAxisAngle" "linalg/glsl.quatFromMat3" "linalg/glsl.quatFromMat4" "linalg/glsl.quatMulVec3" "linalg/glsl.quatNlerp" "linalg/glsl.quatSlerp" "linalg/glsl.radians_dvec2" "linalg/glsl.radians_dvec3" "linalg/glsl.radians_dvec4" "linalg/glsl.radians_f32" "linalg/glsl.radians_f64" "linalg/glsl.radians_vec2" "linalg/glsl.radians_vec3" "linalg/glsl.radians_vec4" "linalg/glsl.reflect_dvec2" "linalg/glsl.reflect_dvec3" "linalg/glsl.reflect_dvec4" "linalg/glsl.reflect_f32" "linalg/glsl.reflect_f64" "linalg/glsl.reflect_vec2" "linalg/glsl.reflect_vec3" "linalg/glsl.reflect_vec4" "linalg/glsl.refract_dvec2" "linalg/glsl.refract_dvec3" "linalg/glsl.refract_dvec4" "linalg/glsl.refract_f32" "linalg/glsl.refract_f64" "linalg/glsl.refract_vec2" "linalg/glsl.refract_vec3" "linalg/glsl.refract_vec4" "linalg/glsl.round_dvec2" "linalg/glsl.round_dvec3" "linalg/glsl.round_dvec4" "linalg/glsl.round_f32" "linalg/glsl.round_f64" "linalg/glsl.round_vec2" "linalg/glsl.round_vec3" "linalg/glsl.round_vec4" "linalg/glsl.saturate_dvec2" "linalg/glsl.saturate_dvec3" "linalg/glsl.saturate_dvec4" "linalg/glsl.saturate_f32" "linalg/glsl.saturate_f64" "linalg/glsl.saturate_i32" "linalg/glsl.saturate_ivec2" "linalg/glsl.saturate_ivec3" "linalg/glsl.saturate_ivec4" "linalg/glsl.saturate_u32" "linalg/glsl.saturate_uvec2" "linalg/glsl.saturate_uvec3" "linalg/glsl.saturate_uvec4" "linalg/glsl.saturate_vec2" "linalg/glsl.saturate_vec3" "linalg/glsl.saturate_vec4" "linalg/glsl.scalarTripleProduct_dvec3" "linalg/glsl.scalarTripleProduct_ivec3" "linalg/glsl.scalarTripleProduct_vec3" "linalg/glsl.sign_dvec2" "linalg/glsl.sign_dvec3" "linalg/glsl.sign_dvec4" "linalg/glsl.sign_f32" "linalg/glsl.sign_f64" "linalg/glsl.sign_i32" "linalg/glsl.sign_ivec2" "linalg/glsl.sign_ivec3" "linalg/glsl.sign_ivec4" "linalg/glsl.sign_u32" "linalg/glsl.sign_uvec2" "linalg/glsl.sign_uvec3" "linalg/glsl.sign_uvec4" "linalg/glsl.sign_vec2" "linalg/glsl.sign_vec3" "linalg/glsl.sign_vec4" "linalg/glsl.sin_dvec2" "linalg/glsl.sin_dvec3" "linalg/glsl.sin_dvec4" "linalg/glsl.sin_f32" "linalg/glsl.sin_f64" "linalg/glsl.sin_vec2" "linalg/glsl.sin_vec3" "linalg/glsl.sin_vec4" "linalg/glsl.sinh_dvec2" "linalg/glsl.sinh_dvec3" "linalg/glsl.sinh_dvec4" "linalg/glsl.sinh_f32" "linalg/glsl.sinh_f64" "linalg/glsl.sinh_vec2" "linalg/glsl.sinh_vec3" "linalg/glsl.sinh_vec4" "linalg/glsl.smoothstep_dvec2" "linalg/glsl.smoothstep_dvec3" "linalg/glsl.smoothstep_dvec4" "linalg/glsl.smoothstep_f32" "linalg/glsl.smoothstep_f64" "linalg/glsl.smoothstep_vec2" "linalg/glsl.smoothstep_vec3" "linalg/glsl.smoothstep_vec4" "linalg/glsl.sqrt_dvec2" "linalg/glsl.sqrt_dvec3" "linalg/glsl.sqrt_dvec4" "linalg/glsl.sqrt_f32" "linalg/glsl.sqrt_f64" "linalg/glsl.sqrt_vec2" "linalg/glsl.sqrt_vec3" "linalg/glsl.sqrt_vec4" "linalg/glsl.step_dvec2" "linalg/glsl.step_dvec3" "linalg/glsl.step_dvec4" "linalg/glsl.step_f32" "linalg/glsl.step_f64" "linalg/glsl.step_vec2" "linalg/glsl.step_vec3" "linalg/glsl.step_vec4" "linalg/glsl.tan_dvec2" "linalg/glsl.tan_dvec3" "linalg/glsl.tan_dvec4" "linalg/glsl.tan_f32" "linalg/glsl.tan_f64" "linalg/glsl.tan_vec2" "linalg/glsl.tan_vec3" "linalg/glsl.tan_vec4" "linalg/glsl.tanh_dvec2" "linalg/glsl.tanh_dvec3" "linalg/glsl.tanh_dvec4" "linalg/glsl.tanh_f32" "linalg/glsl.tanh_f64" "linalg/glsl.tanh_vec2" "linalg/glsl.tanh_vec3" "linalg/glsl.tanh_vec4" "linalg/glsl.transpose" "linalg/glsl.vectorTripleProduct_dvec3" "linalg/glsl.vectorTripleProduct_ivec3" "linalg/glsl.vectorTripleProduct_vec3" "linalg/glsl.abs" "linalg/glsl.acos" "linalg/glsl.acosh" "linalg/glsl.adjugate" "linalg/glsl.all" "linalg/glsl.any" "linalg/glsl.asinh" "linalg/glsl.asin" "linalg/glsl.atan" "linalg/glsl.atan2" "linalg/glsl.atanh" "linalg/glsl.ceil" "linalg/glsl.clamp" "linalg/glsl.cosh" "linalg/glsl.cos" "linalg/glsl.cross" "linalg/glsl.degrees" "linalg/glsl.determinant" "linalg/glsl.distance" "linalg/glsl.dot" "linalg/glsl.equal" "linalg/glsl.exp2" "linalg/glsl.exp" "linalg/glsl.faceForward" "linalg/glsl.floor" "linalg/glsl.fract" "linalg/glsl.greaterThanEqual" "linalg/glsl.greaterThan" "linalg/glsl.inverse" "linalg/glsl.inverse_transpose" "linalg/glsl.inversesqrt" "linalg/glsl.length" "linalg/glsl.lerp" "linalg/glsl.lessThan" "linalg/glsl.lessThanEqual" "linalg/glsl.log" "linalg/glsl.max" "linalg/glsl.min" "linalg/glsl.mix" "linalg/glsl.mod" "linalg/glsl.nlerp" "linalg/glsl.normalize" "linalg/glsl.not" "linalg/glsl.notEqual" "linalg/glsl.pow" "linalg/glsl.radians" "linalg/glsl.reflect" "linalg/glsl.refract" "linalg/glsl.round" "linalg/glsl.rsqrt" "linalg/glsl.saturate" "linalg/glsl.scalarTripleProduct" "linalg/glsl.sign" "linalg/glsl.sin" "linalg/glsl.sinh" "linalg/glsl.slerp" "linalg/glsl.smoothstep" "linalg/glsl.sqrt" "linalg/glsl.step" "linalg/glsl.tanh" "linalg/glsl.tan" "linalg/glsl.vectorTripleProduct"))

(setq odin-linalg/hlsl-types '( "bool2" "bool3" "bool4" "double" "double1x1" "double1x2" "double1x3" "double1x4" "double2x1" "double2x2" "double2" "double2x3" "double2x4" "double3x1" "double3x3" "double3x4" "double3" "double3x2" "double4" "double4x1" "double4x2" "double4x3" "double4x4" "float1x1" "float1x2" "float1x3" "float1x4" "float2x4" "float2" "float2x1" "float2x2" "float2x3" "float3x1" "float3x2" "float3x3" "float3" "float3x4" "float4x1" "float4x2" "float4x3" "float4x4" "float4" "float" "int1x1" "int" "int1x2" "int1x3" "int1x4" "int2" "int2x1" "int2x2" "int2x3" "int2x4" "int3x1" "int3x2" "int3x3" "int3" "int3x4" "int4" "int4x3" "int4x1" "int4x4" "int4x2" "uint2" "uint3" "uint" "uint4"))

 (setq odin-linalg/hlsl-proc '( "linalg/hlsl.abs_double2" "linalg/hlsl.abs_double3" "linalg/hlsl.abs_double4" "linalg/hlsl.abs_double" "linalg/hlsl.abs_float" "linalg/hlsl.abs_float2" "linalg/hlsl.abs_float3" "linalg/hlsl.abs_float4" "linalg/hlsl.abs_int4" "linalg/hlsl.abs_int" "linalg/hlsl.abs_int2" "linalg/hlsl.abs_int3" "linalg/hlsl.abs_uint3" "linalg/hlsl.abs_uint4" "linalg/hlsl.abs_uint" "linalg/hlsl.abs_uint2" "linalg/hlsl.acos_double2" "linalg/hlsl.acos_double3" "linalg/hlsl.acos_double" "linalg/hlsl.acos_double4" "linalg/hlsl.acos_float2" "linalg/hlsl.acos_float" "linalg/hlsl.acos_float3" "linalg/hlsl.acos_float4" "linalg/hlsl.acosh_double2" "linalg/hlsl.acosh_double3" "linalg/hlsl.acosh_double4" "linalg/hlsl.acosh_double" "linalg/hlsl.acosh_float2" "linalg/hlsl.acosh_float3" "linalg/hlsl.acosh_float4" "linalg/hlsl.acosh_float" "linalg/hlsl.all_bool3" "linalg/hlsl.all_bool" "linalg/hlsl.all_bool2" "linalg/hlsl.all_bool4" "linalg/hlsl.any_bool2" "linalg/hlsl.any_bool" "linalg/hlsl.any_bool3" "linalg/hlsl.any_bool4" "linalg/hlsl.asdouble_bool2" "linalg/hlsl.asdouble_bool3" "linalg/hlsl.asdouble_bool4" "linalg/hlsl.asdouble_double1x1" "linalg/hlsl.asdouble_double1x2" "linalg/hlsl.asdouble_double1x3" "linalg/hlsl.asdouble_double1x4" "linalg/hlsl.asdouble_double2" "linalg/hlsl.asdouble_double2x1" "linalg/hlsl.asdouble_double2x2" "linalg/hlsl.asdouble_double2x3" "linalg/hlsl.asdouble_double2x4" "linalg/hlsl.asdouble_double3" "linalg/hlsl.asdouble_double3x1" "linalg/hlsl.asdouble_double3x2" "linalg/hlsl.asdouble_double3x3" "linalg/hlsl.asdouble_double" "linalg/hlsl.asdouble_double3x4" "linalg/hlsl.asdouble_double4x1" "linalg/hlsl.asdouble_double4x2" "linalg/hlsl.asdouble_double4x3" "linalg/hlsl.asdouble_double4" "linalg/hlsl.asdouble_double4x4" "linalg/hlsl.asdouble_float1x1" "linalg/hlsl.asdouble_float1x2" "linalg/hlsl.asdouble_float1x3" "linalg/hlsl.asdouble_float" "linalg/hlsl.asdouble_float1x4" "linalg/hlsl.asdouble_float2" "linalg/hlsl.asdouble_float2x1" "linalg/hlsl.asdouble_float2x2" "linalg/hlsl.asdouble_float2x3" "linalg/hlsl.asdouble_float2x4" "linalg/hlsl.asdouble_float3x1" "linalg/hlsl.asdouble_float3x2" "linalg/hlsl.asdouble_float3x3" "linalg/hlsl.asdouble_float3x4" "linalg/hlsl.asdouble_float3" "linalg/hlsl.asdouble_float4" "linalg/hlsl.asdouble_float4x1" "linalg/hlsl.asdouble_float4x2" "linalg/hlsl.asdouble_float4x3" "linalg/hlsl.asdouble_float4x4" "linalg/hlsl.asdouble_int2" "linalg/hlsl.asdouble_int3" "linalg/hlsl.asdouble_int4" "linalg/hlsl.asdouble_int" "linalg/hlsl.asdouble_uint" "linalg/hlsl.asdouble_uint2" "linalg/hlsl.asdouble_uint3" "linalg/hlsl.asdouble_uint4" "linalg/hlsl.asfloat_bool2" "linalg/hlsl.asfloat_bool3" "linalg/hlsl.asfloat_bool4" "linalg/hlsl.asfloat_double1x1" "linalg/hlsl.asfloat_double1x2" "linalg/hlsl.asfloat_double1x3" "linalg/hlsl.asfloat_double1x4" "linalg/hlsl.asfloat_double2x1" "linalg/hlsl.asfloat_double" "linalg/hlsl.asfloat_double2x2" "linalg/hlsl.asfloat_double2x3" "linalg/hlsl.asfloat_double2x4" "linalg/hlsl.asfloat_double2" "linalg/hlsl.asfloat_double3x1" "linalg/hlsl.asfloat_double3x2" "linalg/hlsl.asfloat_double3x3" "linalg/hlsl.asfloat_double3x4" "linalg/hlsl.asfloat_double3" "linalg/hlsl.asfloat_double4" "linalg/hlsl.asfloat_double4x1" "linalg/hlsl.asfloat_double4x2" "linalg/hlsl.asfloat_double4x3" "linalg/hlsl.asfloat_double4x4" "linalg/hlsl.asfloat_float1x1" "linalg/hlsl.asfloat_float" "linalg/hlsl.asfloat_float1x2" "linalg/hlsl.asfloat_float1x3" "linalg/hlsl.asfloat_float1x4" "linalg/hlsl.asfloat_float2x1" "linalg/hlsl.asfloat_float2x3" "linalg/hlsl.asfloat_float2" "linalg/hlsl.asfloat_float2x2" "linalg/hlsl.asfloat_float2x4" "linalg/hlsl.asfloat_float3" "linalg/hlsl.asfloat_float3x1" "linalg/hlsl.asfloat_float3x2" "linalg/hlsl.asfloat_float3x3" "linalg/hlsl.asfloat_float3x4" "linalg/hlsl.asfloat_float4" "linalg/hlsl.asfloat_float4x1" "linalg/hlsl.asfloat_float4x2" "linalg/hlsl.asfloat_float4x3" "linalg/hlsl.asfloat_float4x4" "linalg/hlsl.asfloat_int2" "linalg/hlsl.asfloat_int3" "linalg/hlsl.asfloat_int4" "linalg/hlsl.asfloat_int" "linalg/hlsl.asfloat_uint2" "linalg/hlsl.asfloat_uint3" "linalg/hlsl.asfloat_uint4" "linalg/hlsl.asfloat_uint" "linalg/hlsl.asin_double2" "linalg/hlsl.asin_double" "linalg/hlsl.asin_double3" "linalg/hlsl.asin_double4" "linalg/hlsl.asin_float" "linalg/hlsl.asin_float2" "linalg/hlsl.asin_float3" "linalg/hlsl.asin_float4" "linalg/hlsl.asinh_double2" "linalg/hlsl.asinh_double" "linalg/hlsl.asinh_double3" "linalg/hlsl.asinh_double4" "linalg/hlsl.asinh_float2" "linalg/hlsl.asinh_float3" "linalg/hlsl.asinh_float4" "linalg/hlsl.asinh_float" "linalg/hlsl.asint_bool2" "linalg/hlsl.asint_bool3" "linalg/hlsl.asint_bool4" "linalg/hlsl.asint_double1x1" "linalg/hlsl.asint_double1x2" "linalg/hlsl.asint_double1x4" "linalg/hlsl.asint_double2x2" "linalg/hlsl.asint_double" "linalg/hlsl.asint_double1x3" "linalg/hlsl.asint_double2x1" "linalg/hlsl.asint_double2x3" "linalg/hlsl.asint_double2x4" "linalg/hlsl.asint_double2" "linalg/hlsl.asint_double3x1" "linalg/hlsl.asint_double3x2" "linalg/hlsl.asint_double3x3" "linalg/hlsl.asint_double3x4" "linalg/hlsl.asint_double3" "linalg/hlsl.asint_double4" "linalg/hlsl.asint_double4x1" "linalg/hlsl.asint_double4x2" "linalg/hlsl.asint_double4x3" "linalg/hlsl.asint_double4x4" "linalg/hlsl.asint_float1x1" "linalg/hlsl.asint_float1x2" "linalg/hlsl.asint_float1x4" "linalg/hlsl.asint_float2" "linalg/hlsl.asint_float2x1" "linalg/hlsl.asint_float" "linalg/hlsl.asint_float1x3" "linalg/hlsl.asint_float2x2" "linalg/hlsl.asint_float2x3" "linalg/hlsl.asint_float2x4" "linalg/hlsl.asint_float3x1" "linalg/hlsl.asint_float3x2" "linalg/hlsl.asint_float3x3" "linalg/hlsl.asint_float3" "linalg/hlsl.asint_float3x4" "linalg/hlsl.asint_float4" "linalg/hlsl.asint_float4x1" "linalg/hlsl.asint_float4x2" "linalg/hlsl.asint_float4x3" "linalg/hlsl.asint_float4x4" "linalg/hlsl.asint_int3" "linalg/hlsl.asint_int" "linalg/hlsl.asint_int2" "linalg/hlsl.asint_int4" "linalg/hlsl.asint_uint2" "linalg/hlsl.asint_uint4" "linalg/hlsl.asint_uint" "linalg/hlsl.asint_uint3" "linalg/hlsl.asuint_bool2" "linalg/hlsl.asuint_bool3" "linalg/hlsl.asuint_bool4" "linalg/hlsl.asuint_double2" "linalg/hlsl.asuint_double3" "linalg/hlsl.asuint_double4" "linalg/hlsl.asuint_double" "linalg/hlsl.asuint_float" "linalg/hlsl.asuint_float2" "linalg/hlsl.asuint_float3" "linalg/hlsl.asuint_float4" "linalg/hlsl.asuint_int2" "linalg/hlsl.asuint_int3" "linalg/hlsl.asuint_int4" "linalg/hlsl.asuint_int" "linalg/hlsl.asuint_uint2" "linalg/hlsl.asuint_uint" "linalg/hlsl.asuint_uint3" "linalg/hlsl.asuint_uint4" "linalg/hlsl.atan2_double2" "linalg/hlsl.atan2_double3" "linalg/hlsl.atan2_double4" "linalg/hlsl.atan2_double" "linalg/hlsl.atan2_float4" "linalg/hlsl.atan2_float" "linalg/hlsl.atan2_float2" "linalg/hlsl.atan2_float3" "linalg/hlsl.atan_double" "linalg/hlsl.atan_double2" "linalg/hlsl.atan_double3" "linalg/hlsl.atan_double4" "linalg/hlsl.atan_float2" "linalg/hlsl.atan_float3" "linalg/hlsl.atan_float" "linalg/hlsl.atan_float4" "linalg/hlsl.atanh_double2" "linalg/hlsl.atanh_double4" "linalg/hlsl.atanh_double" "linalg/hlsl.atanh_double3" "linalg/hlsl.atanh_float2" "linalg/hlsl.atanh_float3" "linalg/hlsl.atanh_float4" "linalg/hlsl.atanh_float" "linalg/hlsl.ceil_double2" "linalg/hlsl.ceil_double3" "linalg/hlsl.ceil_double4" "linalg/hlsl.ceil_double" "linalg/hlsl.ceil_float2" "linalg/hlsl.ceil_float" "linalg/hlsl.ceil_float3" "linalg/hlsl.ceil_float4" "linalg/hlsl.clamp_double2" "linalg/hlsl.clamp_double3" "linalg/hlsl.clamp_double4" "linalg/hlsl.clamp_double" "linalg/hlsl.clamp_float4" "linalg/hlsl.clamp_float" "linalg/hlsl.clamp_float2" "linalg/hlsl.clamp_float3" "linalg/hlsl.clamp_int3" "linalg/hlsl.clamp_int" "linalg/hlsl.clamp_int2" "linalg/hlsl.clamp_int4" "linalg/hlsl.clamp_uint3" "linalg/hlsl.clamp_uint4" "linalg/hlsl.clamp_uint" "linalg/hlsl.clamp_uint2" "linalg/hlsl.cos_double2" "linalg/hlsl.cos_double4" "linalg/hlsl.cos_double" "linalg/hlsl.cos_double3" "linalg/hlsl.cos_float2" "linalg/hlsl.cos_float3" "linalg/hlsl.cos_float4" "linalg/hlsl.cos_float" "linalg/hlsl.cosh_double2" "linalg/hlsl.cosh_double" "linalg/hlsl.cosh_double3" "linalg/hlsl.cosh_double4" "linalg/hlsl.cosh_float" "linalg/hlsl.cosh_float2" "linalg/hlsl.cosh_float3" "linalg/hlsl.cosh_float4" "linalg/hlsl.cross_double3" "linalg/hlsl.cross_float3" "linalg/hlsl.cross_int3" "linalg/hlsl.degrees_double2" "linalg/hlsl.degrees_double3" "linalg/hlsl.degrees_double4" "linalg/hlsl.degrees_double" "linalg/hlsl.degrees_float2" "linalg/hlsl.degrees_float3" "linalg/hlsl.degrees_float4" "linalg/hlsl.degrees_float" "linalg/hlsl.distance_double2" "linalg/hlsl.distance_double3" "linalg/hlsl.distance_double4" "linalg/hlsl.distance_double" "linalg/hlsl.distance_float2" "linalg/hlsl.distance_float3" "linalg/hlsl.distance_float4" "linalg/hlsl.distance_float" "linalg/hlsl.dot_double2" "linalg/hlsl.dot_double" "linalg/hlsl.dot_double3" "linalg/hlsl.dot_double4" "linalg/hlsl.dot_float" "linalg/hlsl.dot_float2" "linalg/hlsl.dot_float3" "linalg/hlsl.dot_float4" "linalg/hlsl.dot_int2" "linalg/hlsl.dot_int4" "linalg/hlsl.dot_int" "linalg/hlsl.dot_int3" "linalg/hlsl.dot_uint2" "linalg/hlsl.dot_uint3" "linalg/hlsl.dot_uint4" "linalg/hlsl.dot_uint" "linalg/hlsl.equal_double" "linalg/hlsl.equal_double2" "linalg/hlsl.equal_double3" "linalg/hlsl.equal_double4" "linalg/hlsl.equal_float3" "linalg/hlsl.equal_float" "linalg/hlsl.equal_float2" "linalg/hlsl.equal_float4" "linalg/hlsl.equal_int" "linalg/hlsl.equal_int2" "linalg/hlsl.equal_int3" "linalg/hlsl.equal_int4" "linalg/hlsl.equal_uint4" "linalg/hlsl.equal_uint" "linalg/hlsl.equal_uint2" "linalg/hlsl.equal_uint3" "linalg/hlsl.exp2_double" "linalg/hlsl.exp2_double2" "linalg/hlsl.exp2_double3" "linalg/hlsl.exp2_double4" "linalg/hlsl.exp2_float" "linalg/hlsl.exp2_float2" "linalg/hlsl.exp2_float3" "linalg/hlsl.exp2_float4" "linalg/hlsl.exp_double" "linalg/hlsl.exp_double2" "linalg/hlsl.exp_double3" "linalg/hlsl.exp_double4" "linalg/hlsl.exp_float2" "linalg/hlsl.exp_float3" "linalg/hlsl.exp_float4" "linalg/hlsl.exp_float" "linalg/hlsl.faceforward_double2" "linalg/hlsl.faceforward_double3" "linalg/hlsl.faceforward_double" "linalg/hlsl.faceforward_double4" "linalg/hlsl.faceforward_float" "linalg/hlsl.faceforward_float2" "linalg/hlsl.faceforward_float3" "linalg/hlsl.faceforward_float4" "linalg/hlsl.floor_double" "linalg/hlsl.floor_double3" "linalg/hlsl.floor_double2" "linalg/hlsl.floor_double4" "linalg/hlsl.floor_float2" "linalg/hlsl.floor_float" "linalg/hlsl.floor_float3" "linalg/hlsl.floor_float4" "linalg/hlsl.fmod_double2" "linalg/hlsl.fmod_double3" "linalg/hlsl.fmod_double4" "linalg/hlsl.fmod_double" "linalg/hlsl.fmod_float" "linalg/hlsl.fmod_float2" "linalg/hlsl.fmod_float3" "linalg/hlsl.fmod_float4" "linalg/hlsl.frac_double2" "linalg/hlsl.frac_double3" "linalg/hlsl.frac_double4" "linalg/hlsl.frac_double" "linalg/hlsl.frac_float2" "linalg/hlsl.frac_float" "linalg/hlsl.frac_float3" "linalg/hlsl.frac_float4" "linalg/hlsl.greaterThanEqual_double2" "linalg/hlsl.greaterThanEqual_double" "linalg/hlsl.greaterThanEqual_double3" "linalg/hlsl.greaterThanEqual_double4" "linalg/hlsl.greaterThanEqual_float3" "linalg/hlsl.greaterThanEqual_float" "linalg/hlsl.greaterThanEqual_float2" "linalg/hlsl.greaterThanEqual_float4" "linalg/hlsl.greaterThanEqual_int3" "linalg/hlsl.greaterThanEqual_int" "linalg/hlsl.greaterThanEqual_int2" "linalg/hlsl.greaterThanEqual_int4" "linalg/hlsl.greaterThanEqual_uint" "linalg/hlsl.greaterThanEqual_uint2" "linalg/hlsl.greaterThanEqual_uint3" "linalg/hlsl.greaterThanEqual_uint4" "linalg/hlsl.greaterThan_double3" "linalg/hlsl.greaterThan_double" "linalg/hlsl.greaterThan_double2" "linalg/hlsl.greaterThan_double4" "linalg/hlsl.greaterThan_float2" "linalg/hlsl.greaterThan_float3" "linalg/hlsl.greaterThan_float4" "linalg/hlsl.greaterThan_float" "linalg/hlsl.greaterThan_int" "linalg/hlsl.greaterThan_int2" "linalg/hlsl.greaterThan_int3" "linalg/hlsl.greaterThan_int4" "linalg/hlsl.greaterThan_uint2" "linalg/hlsl.greaterThan_uint" "linalg/hlsl.greaterThan_uint3" "linalg/hlsl.greaterThan_uint4" "linalg/hlsl.inverse_double1x1" "linalg/hlsl.inverse_double2x2" "linalg/hlsl.inverse_double3x3" "linalg/hlsl.inverse_double4x4" "linalg/hlsl.inverse_float1x1" "linalg/hlsl.inverse_float2x2" "linalg/hlsl.inverse_float3x3" "linalg/hlsl.inverse_float4x4" "linalg/hlsl.isfinite_double2" "linalg/hlsl.isfinite_double" "linalg/hlsl.isfinite_double3" "linalg/hlsl.isfinite_double4" "linalg/hlsl.isfinite_float2" "linalg/hlsl.isfinite_float" "linalg/hlsl.isfinite_float3" "linalg/hlsl.isfinite_float4" "linalg/hlsl.isinf_double2" "linalg/hlsl.isinf_double" "linalg/hlsl.isinf_double3" "linalg/hlsl.isinf_double4" "linalg/hlsl.isinf_float2" "linalg/hlsl.isinf_float" "linalg/hlsl.isinf_float3" "linalg/hlsl.isinf_float4" "linalg/hlsl.isnan_double2" "linalg/hlsl.isnan_double" "linalg/hlsl.isnan_double3" "linalg/hlsl.isnan_double4" "linalg/hlsl.isnan_float" "linalg/hlsl.isnan_float2" "linalg/hlsl.isnan_float3" "linalg/hlsl.isnan_float4" "linalg/hlsl.length_double2" "linalg/hlsl.length_double3" "linalg/hlsl.length_double4" "linalg/hlsl.length_double" "linalg/hlsl.length_float2" "linalg/hlsl.length_float4" "linalg/hlsl.length_float" "linalg/hlsl.length_float3" "linalg/hlsl.lerp_double" "linalg/hlsl.lerp_double4" "linalg/hlsl.lerp_double3" "linalg/hlsl.lerp_double2" "linalg/hlsl.lerp_float2" "linalg/hlsl.lerp_float3" "linalg/hlsl.lerp_float" "linalg/hlsl.lerp_float4" "linalg/hlsl.lessThanEqual_double" "linalg/hlsl.lessThanEqual_double2" "linalg/hlsl.lessThanEqual_double3" "linalg/hlsl.lessThanEqual_double4" "linalg/hlsl.lessThanEqual_float2" "linalg/hlsl.lessThanEqual_float3" "linalg/hlsl.lessThanEqual_float4" "linalg/hlsl.lessThanEqual_float" "linalg/hlsl.lessThanEqual_int2" "linalg/hlsl.lessThanEqual_int3" "linalg/hlsl.lessThanEqual_int4" "linalg/hlsl.lessThanEqual_int" "linalg/hlsl.lessThanEqual_uint2" "linalg/hlsl.lessThanEqual_uint3" "linalg/hlsl.lessThanEqual_uint4" "linalg/hlsl.lessThanEqual_uint" "linalg/hlsl.lessThan_double2" "linalg/hlsl.lessThan_double3" "linalg/hlsl.lessThan_double4" "linalg/hlsl.lessThan_double" "linalg/hlsl.lessThan_float2" "linalg/hlsl.lessThan_float3" "linalg/hlsl.lessThan_float" "linalg/hlsl.lessThan_float4" "linalg/hlsl.lessThan_int2" "linalg/hlsl.lessThan_int3" "linalg/hlsl.lessThan_int" "linalg/hlsl.lessThan_int4" "linalg/hlsl.lessThan_uint3" "linalg/hlsl.lessThan_uint" "linalg/hlsl.lessThan_uint2" "linalg/hlsl.lessThan_uint4" "linalg/hlsl.log10_double2" "linalg/hlsl.log10_double3" "linalg/hlsl.log10_double4" "linalg/hlsl.log10_double" "linalg/hlsl.log10_float3" "linalg/hlsl.log10_float" "linalg/hlsl.log10_float2" "linalg/hlsl.log10_float4" "linalg/hlsl.log2_double" "linalg/hlsl.log2_double2" "linalg/hlsl.log2_double3" "linalg/hlsl.log2_double4" "linalg/hlsl.log2_float2" "linalg/hlsl.log2_float3" "linalg/hlsl.log2_float4" "linalg/hlsl.log2_float" "linalg/hlsl.log_double2" "linalg/hlsl.log_double3" "linalg/hlsl.log_double4" "linalg/hlsl.log_double" "linalg/hlsl.log_float2" "linalg/hlsl.log_float3" "linalg/hlsl.log_float" "linalg/hlsl.log_float4" "linalg/hlsl.max_double2" "linalg/hlsl.max_double3" "linalg/hlsl.max_double4" "linalg/hlsl.max_double" "linalg/hlsl.max_float2" "linalg/hlsl.max_float3" "linalg/hlsl.max_float4" "linalg/hlsl.max_float" "linalg/hlsl.max_int" "linalg/hlsl.max_int2" "linalg/hlsl.max_int3" "linalg/hlsl.max_int4" "linalg/hlsl.max_uint" "linalg/hlsl.max_uint2" "linalg/hlsl.max_uint3" "linalg/hlsl.max_uint4" "linalg/hlsl.min_double" "linalg/hlsl.min_double2" "linalg/hlsl.min_double3" "linalg/hlsl.min_double4" "linalg/hlsl.min_float2" "linalg/hlsl.min_float3" "linalg/hlsl.min_float4" "linalg/hlsl.min_float" "linalg/hlsl.min_int4" "linalg/hlsl.min_int" "linalg/hlsl.min_int2" "linalg/hlsl.min_int3" "linalg/hlsl.min_uint" "linalg/hlsl.min_uint2" "linalg/hlsl.min_uint3" "linalg/hlsl.min_uint4" "linalg/hlsl.normalize_double2" "linalg/hlsl.normalize_double4" "linalg/hlsl.normalize_double" "linalg/hlsl.normalize_double3" "linalg/hlsl.normalize_float2" "linalg/hlsl.normalize_float3" "linalg/hlsl.normalize_float4" "linalg/hlsl.normalize_float" "linalg/hlsl.notEqual_double" "linalg/hlsl.notEqual_double2" "linalg/hlsl.notEqual_double3" "linalg/hlsl.notEqual_double4" "linalg/hlsl.notEqual_float4" "linalg/hlsl.notEqual_float" "linalg/hlsl.notEqual_float2" "linalg/hlsl.notEqual_float3" "linalg/hlsl.notEqual_int" "linalg/hlsl.notEqual_int2" "linalg/hlsl.notEqual_int3" "linalg/hlsl.notEqual_int4" "linalg/hlsl.notEqual_uint" "linalg/hlsl.notEqual_uint2" "linalg/hlsl.notEqual_uint3" "linalg/hlsl.notEqual_uint4" "linalg/hlsl.not_bool" "linalg/hlsl.not_bool2" "linalg/hlsl.not_bool3" "linalg/hlsl.not_bool4" "linalg/hlsl.pow_double2" "linalg/hlsl.pow_double" "linalg/hlsl.pow_double3" "linalg/hlsl.pow_double4" "linalg/hlsl.pow_float2" "linalg/hlsl.pow_float3" "linalg/hlsl.pow_float4" "linalg/hlsl.pow_float" "linalg/hlsl.radians_double" "linalg/hlsl.radians_double2" "linalg/hlsl.radians_double3" "linalg/hlsl.radians_double4" "linalg/hlsl.radians_float" "linalg/hlsl.radians_float2" "linalg/hlsl.radians_float3" "linalg/hlsl.radians_float4" "linalg/hlsl.rcp_double3" "linalg/hlsl.rcp_double4" "linalg/hlsl.rcp_double" "linalg/hlsl.rcp_double2" "linalg/hlsl.rcp_float2" "linalg/hlsl.rcp_float3" "linalg/hlsl.rcp_float4" "linalg/hlsl.rcp_float" "linalg/hlsl.reflect_double" "linalg/hlsl.reflect_double2" "linalg/hlsl.reflect_double3" "linalg/hlsl.reflect_double4" "linalg/hlsl.reflect_float2" "linalg/hlsl.reflect_float" "linalg/hlsl.reflect_float3" "linalg/hlsl.reflect_float4" "linalg/hlsl.refract_double2" "linalg/hlsl.refract_double3" "linalg/hlsl.refract_double" "linalg/hlsl.refract_double4" "linalg/hlsl.refract_float2" "linalg/hlsl.refract_float4" "linalg/hlsl.refract_float" "linalg/hlsl.refract_float3" "linalg/hlsl.round_double" "linalg/hlsl.round_double2" "linalg/hlsl.round_double3" "linalg/hlsl.round_double4" "linalg/hlsl.round_float2" "linalg/hlsl.round_float" "linalg/hlsl.round_float3" "linalg/hlsl.round_float4" "linalg/hlsl.rsqrt_double" "linalg/hlsl.rsqrt_double2" "linalg/hlsl.rsqrt_double3" "linalg/hlsl.rsqrt_double4" "linalg/hlsl.rsqrt_float" "linalg/hlsl.rsqrt_float2" "linalg/hlsl.rsqrt_float3" "linalg/hlsl.rsqrt_float4" "linalg/hlsl.saturate_double2" "linalg/hlsl.saturate_double3" "linalg/hlsl.saturate_double4" "linalg/hlsl.saturate_double" "linalg/hlsl.saturate_float3" "linalg/hlsl.saturate_float4" "linalg/hlsl.saturate_float" "linalg/hlsl.saturate_float2" "linalg/hlsl.saturate_int" "linalg/hlsl.saturate_int2" "linalg/hlsl.saturate_int3" "linalg/hlsl.saturate_int4" "linalg/hlsl.saturate_uint2" "linalg/hlsl.saturate_uint3" "linalg/hlsl.saturate_uint4" "linalg/hlsl.saturate_uint" "linalg/hlsl.scalarTripleProduct_double3" "linalg/hlsl.scalarTripleProduct_float3" "linalg/hlsl.scalarTripleProduct_int3" "linalg/hlsl.sign_double2" "linalg/hlsl.sign_double3" "linalg/hlsl.sign_double4" "linalg/hlsl.sign_double" "linalg/hlsl.sign_float" "linalg/hlsl.sign_float2" "linalg/hlsl.sign_float3" "linalg/hlsl.sign_float4" "linalg/hlsl.sign_int3" "linalg/hlsl.sign_int4" "linalg/hlsl.sign_int" "linalg/hlsl.sign_int2" "linalg/hlsl.sign_uint" "linalg/hlsl.sign_uint2" "linalg/hlsl.sign_uint3" "linalg/hlsl.sign_uint4" "linalg/hlsl.sin_double" "linalg/hlsl.sin_double3" "linalg/hlsl.sin_double4" "linalg/hlsl.sin_double2" "linalg/hlsl.sin_float2" "linalg/hlsl.sin_float3" "linalg/hlsl.sin_float4" "linalg/hlsl.sin_float" "linalg/hlsl.sinh_double" "linalg/hlsl.sinh_double2" "linalg/hlsl.sinh_double3" "linalg/hlsl.sinh_double4" "linalg/hlsl.sinh_float2" "linalg/hlsl.sinh_float3" "linalg/hlsl.sinh_float4" "linalg/hlsl.sinh_float" "linalg/hlsl.smoothstep_double" "linalg/hlsl.smoothstep_double2" "linalg/hlsl.smoothstep_double3" "linalg/hlsl.smoothstep_double4" "linalg/hlsl.smoothstep_float2" "linalg/hlsl.smoothstep_float" "linalg/hlsl.smoothstep_float3" "linalg/hlsl.smoothstep_float4" "linalg/hlsl.sqrt_double" "linalg/hlsl.sqrt_double2" "linalg/hlsl.sqrt_double3" "linalg/hlsl.sqrt_double4" "linalg/hlsl.sqrt_float" "linalg/hlsl.sqrt_float2" "linalg/hlsl.sqrt_float3" "linalg/hlsl.sqrt_float4" "linalg/hlsl.step_double" "linalg/hlsl.step_double2" "linalg/hlsl.step_double3" "linalg/hlsl.step_double4" "linalg/hlsl.step_float2" "linalg/hlsl.step_float3" "linalg/hlsl.step_float4" "linalg/hlsl.step_float" "linalg/hlsl.tan_double2" "linalg/hlsl.tan_double3" "linalg/hlsl.tan_double4" "linalg/hlsl.tan_double" "linalg/hlsl.tan_float3" "linalg/hlsl.tan_float4" "linalg/hlsl.tan_float" "linalg/hlsl.tan_float2" "linalg/hlsl.tanh_double2" "linalg/hlsl.tanh_double3" "linalg/hlsl.tanh_double4" "linalg/hlsl.tanh_double" "linalg/hlsl.tanh_float2" "linalg/hlsl.tanh_float" "linalg/hlsl.tanh_float3" "linalg/hlsl.tanh_float4" "linalg/hlsl.transpose" "linalg/hlsl.vectorTripleProduct_double3" "linalg/hlsl.vectorTripleProduct_float3" "linalg/hlsl.vectorTripleProduct_int3" "linalg/hlsl.abs" "linalg/hlsl.acos" "linalg/hlsl.acosh" "linalg/hlsl.adjugate" "linalg/hlsl.all" "linalg/hlsl.any" "linalg/hlsl.asdouble" "linalg/hlsl.asfloat" "linalg/hlsl.asint" "linalg/hlsl.asin" "linalg/hlsl.asinh" "linalg/hlsl.asuint" "linalg/hlsl.atan2" "linalg/hlsl.atanh" "linalg/hlsl.atan" "linalg/hlsl.ceil" "linalg/hlsl.clamp" "linalg/hlsl.cosh" "linalg/hlsl.cos" "linalg/hlsl.cross" "linalg/hlsl.degrees" "linalg/hlsl.determinant" "linalg/hlsl.distance" "linalg/hlsl.dot" "linalg/hlsl.equal" "linalg/hlsl.exp2" "linalg/hlsl.exp" "linalg/hlsl.faceforward" "linalg/hlsl.floor" "linalg/hlsl.fmod" "linalg/hlsl.frac" "linalg/hlsl.greaterThanEqual" "linalg/hlsl.greaterThan" "linalg/hlsl.inverse_transpose" "linalg/hlsl.inverse" "linalg/hlsl.isfinite" "linalg/hlsl.isinf" "linalg/hlsl.isnan" "linalg/hlsl.length" "linalg/hlsl.lerp" "linalg/hlsl.lessThanEqual" "linalg/hlsl.lessThan" "linalg/hlsl.log" "linalg/hlsl.log10" "linalg/hlsl.log2" "linalg/hlsl.max" "linalg/hlsl.min" "linalg/hlsl.normalize" "linalg/hlsl.notEqual" "linalg/hlsl.not" "linalg/hlsl.pow" "linalg/hlsl.radians" "linalg/hlsl.rcp" "linalg/hlsl.reflect" "linalg/hlsl.refract" "linalg/hlsl.round" "linalg/hlsl.rsqrt" "linalg/hlsl.saturate" "linalg/hlsl.scalarTripleProduct" "linalg/hlsl.sign" "linalg/hlsl.sin" "linalg/hlsl.sinh" "linalg/hlsl.smoothstep" "linalg/hlsl.sqrt" "linalg/hlsl.step" "linalg/hlsl.tanh" "linalg/hlsl.tan" "linalg/hlsl.vectorTripleProduct"))

(setq odin-rand-types '( "Rand"))

 (setq odin-rand-proc '( "rand.create" "rand.exp_float64" "rand.float32_beta" "rand.float32_cauchy_lorentz" "rand.float32_gompertz" "rand.float32" "rand.float32_exponential" "rand.float32_gamma" "rand.float32_laplace" "rand.float32_log_cauchy_lorentz" "rand.float32_log_normal" "rand.float32_normal" "rand.float32_pareto" "rand.float32_range" "rand.float32_triangular" "rand.float32_uniform" "rand.float32_von_mises" "rand.float32_weibull" "rand.float64_beta" "rand.float64_cauchy_lorentz" "rand.float64_exponential" "rand.float64" "rand.float64_gamma" "rand.float64_gompertz" "rand.float64_laplace" "rand.float64_log_cauchy_lorentz" "rand.float64_log_normal" "rand.float64_normal" "rand.float64_pareto" "rand.float64_range" "rand.float64_triangular" "rand.float64_uniform" "rand.float64_von_mises" "rand.float64_weibull" "rand.init" "rand.init_as_system" "rand.int127_max" "rand.int127" "rand.int31" "rand.int31_max" "rand.int63" "rand.int63_max" "rand.int_max" "rand.norm_float64" "rand.perm" "rand.read" "rand.set_global_seed" "rand.shuffle" "rand.uint128" "rand.uint32" "rand.uint64"))

(setq odin-mem-types '( "Allocator_Error" "Allocator_Mode_Set" "Allocator_Mode" "Allocator_Query_Info" "Allocator" "Allocator_Proc" "Arena" "Arena_Temp_Memory" "Dynamic_Pool" "Fixed_Byte_Buffer" "Poly_Raw_Map_Entry" "Poly_Raw_Map" "Raw_Any" "Raw_Complex128" "Raw_Complex64" "Raw_Cstring" "Raw_Dynamic_Array" "Raw_Map" "Raw_Quaternion128_Vector_Scalar" "Raw_Quaternion128" "Raw_Quaternion256" "Raw_Quaternion256_Vector_Scalar" "Raw_Slice" "Raw_String" "Scratch_Allocator" "Small_Stack_Allocation_Header" "Small_Stack" "Stack_Allocation_Header" "Stack" "Tracking_Allocator_Bad_Free_Entry" "Tracking_Allocator_Entry" "Tracking_Allocator"))

 (setq odin-mem-proc '( "mem.align_backward" "mem.align_backward_int" "mem.align_backward_uint" "mem.align_backward_uintptr" "mem.align_formula" "mem.align_forward_int" "mem.align_forward_uintptr" "mem.align_forward_uint" "mem.align_forward" "mem.alloc_bytes" "mem.alloc" "mem.any_to_bytes" "mem.arena_allocator_proc" "mem.arena_allocator" "mem.begin_arena_temp_memory" "mem.buffer_from_slice" "mem.byte_slice" "mem.calc_padding_with_header" "mem.check_zero_ptr" "mem.check_zero" "mem.clone_slice" "mem.compare" "mem.compare_byte_ptrs" "mem.compare_ptrs" "mem.context_from_allocator" "mem.copy" "mem.copy_non_overlapping" "mem.default_resize_align" "mem.default_resize_bytes_align" "mem.delete_cstring" "mem.delete_dynamic_array" "mem.delete_map" "mem.delete_slice" "mem.delete_string" "mem.dynamic_pool_alloc_bytes" "mem.dynamic_pool_alloc" "mem.dynamic_pool_allocator_proc" "mem.dynamic_pool_allocator" "mem.dynamic_pool_destroy" "mem.dynamic_pool_free_all" "mem.dynamic_pool_init" "mem.dynamic_pool_reset" "mem.end_arena_temp_memory" "mem.free" "mem.free_all" "mem.free_bytes" "mem.init_arena" "mem.init_small_stack" "mem.init_stack" "mem.is_power_of_two" "mem.make_aligned" "mem.make_any" "mem.make_dynamic_array" "mem.make_dynamic_array_len_cap" "mem.make_dynamic_array_len" "mem.make_fixed_byte_buffer" "mem.make_map" "mem.make_multi_pointer" "mem.make_slice" "mem.new" "mem.new_aligned" "mem.new_clone" "mem.nil_allocator_proc" "mem.nil_allocator" "mem.panic_allocator" "mem.panic_allocator_proc" "mem.ptr_offset" "mem.ptr_sub" "mem.ptr_to_bytes" "mem.query_features" "mem.query_info" "mem.reinterpret_copy" "mem.resize_bytes" "mem.resize" "mem.scratch_allocator_destroy" "mem.scratch_allocator_init" "mem.scratch_allocator_proc" "mem.scratch_allocator" "mem.set" "mem.simple_equal" "mem.slice_data_cast" "mem.slice_ptr" "mem.slice_to_bytes" "mem.slice_to_components" "mem.small_stack_allocator" "mem.small_stack_allocator_proc" "mem.stack_allocator_proc" "mem.stack_allocator" "mem.tracking_allocator_destroy" "mem.tracking_allocator_init" "mem.tracking_allocator_proc" "mem.tracking_allocator" "mem.zero" "mem.zero_explicit" "mem.zero_item" "mem.zero_slice" "mem.delete" "mem.make" "mem.raw_data"))

(setq odin-virtual-types '( "Allocator_Error" "Growing_Arena" "Growing_Arena_Temp" "Memory_Block_Flag" "Memory_Block_Flags" "Memory_Block" "Protect_Flag" "Protect_Flags" "Static_Arena" "Static_Arena_Temp"))

 (setq odin-virtual-proc '( "virtual.alloc_from_memory_block" "virtual.commit" "virtual.decommit" "virtual.growing_arena_allocator" "virtual.growing_arena_allocator_proc" "virtual.growing_arena_alloc" "virtual.growing_arena_bootstrap_new_by_name" "virtual.growing_arena_bootstrap_new_by_offset" "virtual.growing_arena_check_temp" "virtual.growing_arena_destroy" "virtual.growing_arena_free_all" "virtual.growing_arena_free_last_memory_block" "virtual.growing_arena_temp_begin" "virtual.growing_arena_temp_end" "virtual.memory_block_alloc" "virtual.memory_block_dealloc" "virtual.protect" "virtual.release" "virtual.reserve" "virtual.reserve_and_commit" "virtual.static_arena_allocator" "virtual.static_arena_alloc" "virtual.static_arena_allocator_proc" "virtual.static_arena_bootstrap_new_by_name" "virtual.static_arena_bootstrap_new_by_offset" "virtual.static_arena_check_temp" "virtual.static_arena_destroy" "virtual.static_arena_free_all" "virtual.static_arena_init" "virtual.static_arena_reset_to" "virtual.static_arena_temp_begin" "virtual.static_arena_temp_end" "virtual.arena_allocator" "virtual.arena_alloc" "virtual.arena_check_temp" "virtual.arena_destroy" "virtual.arena_free_all" "virtual.arena_temp_begin" "virtual.arena_temp_end" "virtual.growing_arena_bootstrap_new" "virtual.static_arena_bootstrap_new"))

(setq odin-doc-format-types '( "Array" "Attribute" "Entity" "Entity_Flags" "Entity_Flag" "Entity_Index" "Entity_Kind" "File_Index" "File" "Header" "Header_Base" "Pkg_Flags" "Pkg_Flag" "Pkg_Index" "Pkg" "Position" "Reader_Error" "Scope_Entry" "String" "Type_Flag_Basic" "Type_Flag_Bit_Set" "Type_Flag_Proc" "Type_Flag_Struct" "Type_Flag_Union" "Type_Flags_Basic" "Type_Flags_Bit_Set" "Type_Flags_Proc" "Type_Flags_Struct" "Type_Flags_Union" "Type" "Type_Index" "Type_Kind" "Version_Type"))

 (setq odin-doc-format-proc '( "doc-format.from_array" "doc-format.from_string" "doc-format.read_from_bytes"))

(setq odin-os-types '( "Errno" "File_Info" "File_Mode" "File_Time" "Handle"))

 (setq odin-os-proc '( "os.change_directory" "os.clear_env" "os.close" "os.current_thread_id" "os.environ" "os.exists" "os.exit" "os.file_info_delete" "os.file_info_slice_delete" "os.file_size_from_path" "os.file_size" "os.flush" "os.fstat" "os.ftruncate" "os.get_current_directory" "os.get_env" "os.get_page_size" "os.get_std_handle" "os.get_windows_version_w" "os.heap_alloc" "os.heap_allocator_proc" "os.heap_allocator" "os.heap_free" "os.heap_resize" "os.is_dir" "os.is_file" "os.is_path_separator" "os.is_windows_10" "os.is_windows_11" "os.is_windows_7" "os.is_windows_8" "os.is_windows_8_1" "os.is_windows_vista" "os.is_windows_xp" "os.last_write_time_by_name" "os.last_write_time" "os.link" "os.lookup_env" "os.lstat" "os.make_directory" "os.open" "os.pipe" "os.read_at_least" "os.read_at" "os.read" "os.read_dir" "os.read_entire_file_from_filename" "os.read_entire_file_from_handle" "os.read_full" "os.read_ptr" "os.remove_directory" "os.remove" "os.rename" "os.seek" "os.set_current_directory" "os.set_env" "os.stat" "os.stream_from_handle" "os.truncate" "os.unlink" "os.unset_env" "os.write_at" "os.write_encoded_rune" "os.write_entire_file" "os.write_ptr" "os.write" "os.write_byte" "os.write_rune" "os.write_string" "os.read_entire_file"))

(setq odin-filepath-types '( "Match_Error" "Relative_Error" "Walk_Proc"))

 (setq odin-filepath-proc '( "filepath.abs" "filepath.base" "filepath.clean" "filepath.dir" "filepath.ext" "filepath.from_slash" "filepath.glob" "filepath.is_UNC" "filepath.is_abs" "filepath.is_reserved_name" "filepath.is_separator" "filepath.join" "filepath.join_non_empty" "filepath.long_ext" "filepath.match" "filepath.rel" "filepath.short_stem" "filepath.split_list" "filepath.split" "filepath.stem" "filepath.to_slash" "filepath.volume_name_len" "filepath.volume_name" "filepath.walk"))

(setq odin-slashpath-proc '( "slashpath.base" "slashpath.clean" "slashpath.dir" "slashpath.ext" "slashpath.is_abs" "slashpath.is_separator" "slashpath.join" "slashpath.match" "slashpath.name" "slashpath.split" "slashpath.split_elements"))

(setq odin-reflect-types '( "Enum_Field" "Map_Entry_Info" "Struct_Field" "Struct_Tag" "Type_Info_Any" "Type_Info" "Type_Info_Array" "Type_Info_Bit_Set" "Type_Info_Boolean" "Type_Info_Complex" "Type_Info_Dynamic_Array" "Type_Info_Enum_Value" "Type_Info_Enumerated_Array" "Type_Info_Enum" "Type_Info_Float" "Type_Info_Integer" "Type_Info_Map" "Type_Info_Matrix" "Type_Info_Multi_Pointer" "Type_Info_Named" "Type_Info_Pointer" "Type_Info_Procedure" "Type_Info_Quaternion" "Type_Info_Relative_Pointer" "Type_Info_Relative_Slice" "Type_Info_Rune" "Type_Info_Simd_Vector" "Type_Info_Slice" "Type_Info_String" "Type_Info_Struct" "Type_Info_Tuple" "Type_Info_Type_Id" "Type_Info_Union" "Type_Kind"))

 (setq odin-reflect-proc '( "reflect.align_of_typeid" "reflect.any_base" "reflect.any_core" "reflect.any_data" "reflect.are_types_identical" "reflect.as_bool" "reflect.as_bytes" "reflect.as_f64" "reflect.as_i64" "reflect.as_int" "reflect.as_pointer" "reflect.as_raw_data" "reflect.as_string" "reflect.as_u64" "reflect.as_uint" "reflect.backing_type_kind" "reflect.capacity" "reflect.deref" "reflect.enum_field_names" "reflect.enum_field_values" "reflect.enum_fields_zipped" "reflect.enum_from_name_any" "reflect.enum_from_name" "reflect.enum_string" "reflect.equal" "reflect.eq" "reflect.get_union_variant_raw_tag" "reflect.index" "reflect.is_any" "reflect.is_array" "reflect.is_boolean" "reflect.is_byte" "reflect.is_complex" "reflect.is_cstring" "reflect.is_dynamic_array" "reflect.is_dynamic_map" "reflect.is_enumerated_array" "reflect.is_enum" "reflect.is_float" "reflect.is_integer" "reflect.is_multi_pointer" "reflect.is_nil" "reflect.is_pointer_internally" "reflect.is_pointer" "reflect.is_procedure" "reflect.is_quaternion" "reflect.is_raw_union" "reflect.is_relative_pointer" "reflect.is_relative_slice" "reflect.is_rune" "reflect.is_signed" "reflect.is_simd_vector" "reflect.is_slice" "reflect.is_string" "reflect.is_struct" "reflect.is_tuple" "reflect.is_union" "reflect.is_unsigned" "reflect.length" "reflect.map_entry_info_slice" "reflect.ne" "reflect.not_equal" "reflect.relative_pointer_to_absolute" "reflect.relative_pointer_to_absolute_raw" "reflect.set_union_value" "reflect.set_union_variant_raw_tag" "reflect.set_union_variant_type_info" "reflect.set_union_variant_typeid" "reflect.size_of_typeid" "reflect.struct_field_at" "reflect.struct_field_by_name" "reflect.struct_field_names" "reflect.struct_field_offsets" "reflect.struct_field_tags" "reflect.struct_field_types" "reflect.struct_field_value_by_name" "reflect.struct_fields_zipped" "reflect.struct_tag_get" "reflect.struct_tag_lookup" "reflect.type_info_base_without_enum" "reflect.type_info_base" "reflect.type_info_core" "reflect.type_info_union_is_pure_maybe" "reflect.type_kind" "reflect.typeid_base_without_enum" "reflect.typeid_base" "reflect.typeid_core" "reflect.typeid_elem" "reflect.underlying_type_kind" "reflect.union_variant_type_info" "reflect.union_variant_typeid" "reflect.write_type_builder" "reflect.write_type_writer" "reflect.write_typeid_builder" "reflect.write_typeid_writer" "reflect.write_typeid" "reflect.write_type"))

(setq odin-runtime-types '( "Allocator_Mode" "Allocator_Mode_Set" "Allocator_Proc" "Allocator_Query_Info" "Allocator" "Allocator_Error" "Assertion_Failure_Proc" "Calling_Convention" "Context" "Default_Temp_Allocator" "Equal_Proc" "Hasher_Proc" "Logger" "Logger_Level" "Logger_Options" "Logger_Option" "Logger_Proc" "Map_Entry_Header" "Map_Find_Result" "Map_Hash" "Map_Header" "Maybe" "Odin_Arch_Type" "Odin_Build_Mode_Type" "Odin_Endian_Type" "Odin_OS_Type" "Platform_Endianness" "Raw_Any" "Raw_Cstring" "Raw_Dynamic_Array" "Raw_Map" "Raw_SOA_Footer_Dynamic_Array" "Raw_SOA_Footer_Slice" "Raw_Slice" "Raw_String" "Source_Code_Location" "Type_Info" "Type_Info_Any" "Type_Info_Array" "Type_Info_Bit_Set" "Type_Info_Boolean" "Type_Info_Complex" "Type_Info_Dynamic_Array" "Type_Info_Enum_Value" "Type_Info_Enumerated_Array" "Type_Info_Enum" "Type_Info_Flags" "Type_Info_Flag" "Type_Info_Float" "Type_Info_Integer" "Type_Info_Map" "Type_Info_Matrix" "Type_Info_Multi_Pointer" "Type_Info_Named" "Type_Info_Pointer" "Type_Info_Procedure" "Type_Info_Quaternion" "Type_Info_Relative_Pointer" "Type_Info_Relative_Slice" "Type_Info_Rune" "Type_Info_Simd_Vector" "Type_Info_Slice" "Type_Info_String" "Type_Info_Struct_Soa_Kind" "Type_Info_Struct" "Type_Info_Tuple" "Type_Info_Type_Id" "Type_Info_Union" "Typeid_Kind"))

 (setq odin-runtime-proc '( "runtime.abs_complex128" "runtime.abs_complex32" "runtime.abs_complex64" "runtime.abs_f16" "runtime.abs_f32" "runtime.abs_f64" "runtime.abs_quaternion128" "runtime.abs_quaternion256" "runtime.abs_quaternion64" "runtime.align_forward_int" "runtime.align_forward_uintptr" "runtime.append_elem_string" "runtime.append_elems" "runtime.append_elem" "runtime.append_nothing" "runtime.append_soa_elems" "runtime.append_soa_elem" "runtime.append_string" "runtime.assert" "runtime.bounds_check_error" "runtime.bounds_check_error_loc" "runtime.bounds_trap" "runtime.bswap_128" "runtime.bswap_16" "runtime.bswap_32" "runtime.bswap_64" "runtime.bswap_f16" "runtime.bswap_f32" "runtime.bswap_f64" "runtime.card" "runtime.clear_dynamic_array" "runtime.clear_map" "runtime.complex128_eq" "runtime.complex128_ne" "runtime.complex32_eq" "runtime.complex32_ne" "runtime.complex64_eq" "runtime.complex64_ne" "runtime.container_of" "runtime.copy_from_string" "runtime.copy_slice" "runtime.cstring_len" "runtime.cstring_to_string" "runtime.debug_trap" "runtime.default_allocator" "runtime.default_allocator_proc" "runtime.default_assertion_failure_proc" "runtime.default_context" "runtime.default_hash" "runtime.default_hash_ptr" "runtime.default_hash_string" "runtime.default_hasher10" "runtime.default_hasher11" "runtime.default_hasher12" "runtime.default_hasher1" "runtime.default_hasher13" "runtime.default_hasher14" "runtime.default_hasher15" "runtime.default_hasher16" "runtime.default_hasher2" "runtime.default_hasher3" "runtime.default_hasher4" "runtime.default_hasher5" "runtime.default_hasher6" "runtime.default_hasher7" "runtime.default_hasher8" "runtime.default_hasher9" "runtime.default_hasher_cstring" "runtime.default_hasher_n" "runtime.default_hasher_string" "runtime.default_logger_proc" "runtime.default_logger" "runtime.default_temp_allocator_destroy" "runtime.default_temp_allocator" "runtime.default_temp_allocator_init" "runtime.default_temp_allocator_proc" "runtime.delete_cstring" "runtime.delete_dynamic_array" "runtime.delete_key" "runtime.delete_map" "runtime.delete_slice" "runtime.delete_soa_dynamic_array" "runtime.delete_soa_slice" "runtime.delete_string" "runtime.divmodti4" "runtime.divti3" "runtime.dynamic_array_expr_error" "runtime.dynamic_array_expr_error_loc" "runtime.encode_rune" "runtime.excl_bit_set" "runtime.excl_elem" "runtime.excl_elems" "runtime.extendhfsf2" "runtime.fixdfti" "runtime.fixunsdfdi" "runtime.fixunsdfti" "runtime.floattidf_unsigned" "runtime.floattidf" "runtime.gnu_f2h_ieee" "runtime.gnu_h2f_ieee" "runtime.hermitian_adjoint" "runtime.incl_bit_set" "runtime.incl_elem" "runtime.incl_elems" "runtime.init_global_temporary_allocator" "runtime.insert_at_elem" "runtime.insert_at_elem_string" "runtime.insert_at_elems" "runtime.is_power_of_two_int" "runtime.is_power_of_two_uintptr" "runtime.make_aligned" "runtime.make_dynamic_array_len_cap" "runtime.make_dynamic_array_len" "runtime.make_dynamic_array" "runtime.make_dynamic_array_error_loc" "runtime.make_map" "runtime.make_map_expr_error_loc" "runtime.make_multi_pointer" "runtime.make_slice" "runtime.make_slice_error_loc" "runtime.make_soa_aligned" "runtime.make_soa_dynamic_array_len" "runtime.make_soa_dynamic_array" "runtime.make_soa_dynamic_array_len_cap" "runtime.make_soa_slice" "runtime.map_insert" "runtime.matrix1x1_adjugate" "runtime.matrix1x1_determinant" "runtime.matrix1x1_inverse_transpose" "runtime.matrix1x1_inverse" "runtime.matrix2x2_adjugate" "runtime.matrix2x2_determinant" "runtime.matrix2x2_inverse_transpose" "runtime.matrix2x2_inverse" "runtime.matrix3x3_adjugate" "runtime.matrix3x3_determinant" "runtime.matrix3x3_inverse_transpose" "runtime.matrix3x3_inverse" "runtime.matrix4x4_adjugate" "runtime.matrix4x4_determinant" "runtime.matrix4x4_inverse_transpose" "runtime.matrix4x4_inverse" "runtime.matrix_bounds_check_error" "runtime.matrix_minor" "runtime.matrix_trace" "runtime.max_f16" "runtime.max_f32" "runtime.max_f64" "runtime.mem_alloc" "runtime.mem_alloc_bytes" "runtime.mem_copy" "runtime.mem_copy_non_overlapping" "runtime.mem_free_all" "runtime.mem_free" "runtime.mem_resize" "runtime.mem_zero" "runtime.memory_compare_zero" "runtime.memory_compare" "runtime.memory_equal" "runtime.memset" "runtime.min_f16" "runtime.min_f32" "runtime.min_f64" "runtime.modti3" "runtime.mul_quaternion128" "runtime.mul_quaternion256" "runtime.mul_quaternion64" "runtime.multi_pointer_slice_expr_error" "runtime.multi_pointer_slice_handle_error" "runtime.new" "runtime.new_aligned" "runtime.new_clone" "runtime.nil_allocator_proc" "runtime.nil_allocator" "runtime.ordered_remove" "runtime.os_write" "runtime.panic" "runtime.pop_front" "runtime.pop" "runtime.pop_front_safe" "runtime.pop_safe" "runtime.print_byte" "runtime.print_caller_location" "runtime.print_encoded_rune" "runtime.print_i64" "runtime.print_int" "runtime.print_rune" "runtime.print_string" "runtime.print_strings" "runtime.print_type" "runtime.print_typeid" "runtime.print_u64" "runtime.print_uint" "runtime.print_uintptr" "runtime.quaternion128_eq" "runtime.quaternion128_ne" "runtime.quaternion256_eq" "runtime.quaternion256_ne" "runtime.quaternion64_eq" "runtime.quaternion64_ne" "runtime.quo_complex128" "runtime.quo_complex32" "runtime.quo_complex64" "runtime.quo_quaternion128" "runtime.quo_quaternion256" "runtime.quo_quaternion64" "runtime.raw_array_data" "runtime.raw_dynamic_array_data" "runtime.raw_simd_data" "runtime.raw_slice_data" "runtime.raw_soa_footer_dynamic_array" "runtime.raw_soa_footer_slice" "runtime.raw_string_data" "runtime.read_cycle_counter" "runtime.remove_range" "runtime.reserve_dynamic_array" "runtime.reserve_map" "runtime.reserve_soa" "runtime.resize_dynamic_array" "runtime.resize_soa" "runtime.slice_expr_error_hi_loc" "runtime.slice_expr_error_hi" "runtime.slice_expr_error_lo_hi" "runtime.slice_expr_error_lo_hi_loc" "runtime.slice_handle_error" "runtime.string_cmp" "runtime.string_decode_rune" "runtime.string_eq" "runtime.string_ge" "runtime.string_gt" "runtime.string_le" "runtime.string_lt" "runtime.string_ne" "runtime.trap" "runtime.truncdfhf2" "runtime.truncsfhf2" "runtime.type_assertion_check" "runtime.type_assertion_check2" "runtime.type_assertion_trap" "runtime.type_info_base" "runtime.type_info_base_without_enum" "runtime.type_info_core" "runtime.typeid_base" "runtime.typeid_base_without_enum" "runtime.typeid_core" "runtime.udivmod128" "runtime.udivmodti4" "runtime.udivti3" "runtime.umodti3" "runtime.unimplemented" "runtime.unordered_remove" "runtime.unreachable" "runtime.adjugate" "runtime.append_soa" "runtime.append" "runtime.clear" "runtime.copy" "runtime.delete" "runtime.delete_soa" "runtime.determinant" "runtime.excl" "runtime.free_all" "runtime.free" "runtime.incl" "runtime.insert_at" "runtime.inverse" "runtime.inverse_transpose" "runtime.make" "runtime.make_soa" "runtime.raw_data" "runtime.raw_soa_footer" "runtime.reserve" "runtime.resize"))

(setq odin-simd-types '( "b16x16" "b16x32" "b16x8" "b32x16" "b32x4" "b32x8" "b64x2" "b64x4" "b64x8" "b8x16" "b8x32" "b8x64" "boolx16" "boolx32" "boolx64" "f32x16" "f32x4" "f32x8" "f64x2" "f64x4" "f64x8" "i16x16" "i16x32" "i16x8" "i32x16" "i32x4" "i32x8" "i64x2" "i64x4" "i64x8" "i8x16" "i8x32" "i8x64" "u16x16" "u16x32" "u16x8" "u32x16" "u32x4" "u32x8" "u64x2" "u64x4" "u64x8" "u8x16" "u8x32" "u8x64"))

 (setq odin-simd-proc '( "simd.abs" "simd.add_sat" "simd.add" "simd.and" "simd.and_not" "simd.bit_not" "simd.ceil" "simd.clamp" "simd.copysign" "simd.count_leading_zeros" "simd.count_ones" "simd.count_trailing_zeros" "simd.count_zeros" "simd.div" "simd.extract" "simd.floor" "simd.fma" "simd.from_array" "simd.from_slice" "simd.fused_mul_add" "simd.lanes_eq" "simd.lanes_ge" "simd.lanes_gt" "simd.lanes_le" "simd.lanes_lt" "simd.lanes_ne" "simd.lanes_reverse" "simd.lanes_rotate_left" "simd.lanes_rotate_right" "simd.max" "simd.min" "simd.mul" "simd.nearest" "simd.neg" "simd.or" "simd.recip" "simd.reduce_add_ordered" "simd.reduce_and" "simd.reduce_max" "simd.reduce_min" "simd.reduce_mul_ordered" "simd.reduce_or" "simd.reduce_xor" "simd.replace" "simd.reverse_bits" "simd.select" "simd.shl_masked" "simd.shl" "simd.shr" "simd.shr_masked" "simd.shuffle" "simd.signum" "simd.sqrt" "simd.sub" "simd.sub_sat" "simd.swizzle" "simd.to_array" "simd.to_array_ptr" "simd.to_bits" "simd.trunc" "simd.xor"))

(setq odin-slice-types '( "Map_Entry" "Map_Entry_Info" "Ordering"))

 (setq odin-slice-proc '( "slice.all_of" "slice.all_of_proc" "slice.any_of" "slice.any_of_proc" "slice.as_ptr" "slice.binary_search" "slice.bytes_from_ptr" "slice.clone_to_dynamic" "slice.clone" "slice.cmp" "slice.cmp_proc" "slice.concatenate" "slice.contains" "slice.count" "slice.count_proc" "slice.dot_product" "slice.equal" "slice.fill" "slice.filter" "slice.first_ptr" "slice.first" "slice.from_ptr" "slice.get_ptr" "slice.get" "slice.has_prefix" "slice.has_suffix" "slice.into_dynamic" "slice.is_empty" "slice.is_sorted_by" "slice.is_sorted_by_cmp" "slice.is_sorted_cmp" "slice.is_sorted" "slice.is_sorted_by_key" "slice.last_ptr" "slice.last" "slice.length" "slice.linear_search_proc" "slice.linear_search" "slice.map_entries" "slice.map_entry_infos" "slice.map_keys" "slice.map_values" "slice.mapper" "slice.max" "slice.min" "slice.min_max" "slice.none_of" "slice.none_of_proc" "slice.ptr_add" "slice.ptr_rotate" "slice.ptr_sub" "slice.ptr_swap_non_overlapping" "slice.ptr_swap_overlapping" "slice.reduce" "slice.reinterpret" "slice.reverse_sort_by_cmp" "slice.reverse" "slice.reverse_sort_by_key" "slice.reverse_sort_by" "slice.reverse_sort" "slice.rotate_left" "slice.rotate_right" "slice.scanner" "slice.simple_equal" "slice.sort" "slice.sort_by" "slice.sort_by_cmp" "slice.sort_by_key" "slice.split_at" "slice.split_first" "slice.split_last" "slice.stable_sort" "slice.stable_sort_by_cmp" "slice.stable_sort_by" "slice.swap_between" "slice.swap_with_slice" "slice.swap" "slice.to_bytes" "slice.to_dynamic"))

(setq odin-sort-types '( "Interface"))

 (setq odin-sort-proc '( "sort.ORD" "sort.bubble_sort" "sort.bubble_sort_proc" "sort.compare_bools" "sort.compare_f32s" "sort.compare_f64s" "sort.compare_i16s" "sort.compare_i32s" "sort.compare_i64s" "sort.compare_i8s" "sort.compare_ints" "sort.compare_strings" "sort.compare_u16s" "sort.compare_u32s" "sort.compare_u64s" "sort.compare_u8s" "sort.compare_uints" "sort.heap_sort_proc" "sort.heap_sort" "sort.is_sorted" "sort.map_entries_by_key" "sort.map_entries_by_value" "sort.merge_sort_proc" "sort.merge_sort" "sort.quick_sort" "sort.quick_sort_proc" "sort.reverse_interface" "sort.reverse_slice" "sort.reverse_sort" "sort.rotate" "sort.slice_interface" "sort.slice" "sort.sort" "sort.swap_range"))

(setq odin-strconv-types '( "Decimal_Slice" "Float_Info" "Int_Flag" "Int_Flags"))

 (setq odin-strconv-proc '( "strconv.append_bits_128" "strconv.append_bits" "strconv.append_bool" "strconv.append_float" "strconv.append_int" "strconv.append_uint" "strconv.atof" "strconv.atoi" "strconv.format_digits" "strconv.ftoa" "strconv.generic_ftoa" "strconv.is_integer_negative" "strconv.is_integer_negative_128" "strconv.itoa" "strconv.parse_bool" "strconv.parse_f32" "strconv.parse_f64" "strconv.parse_i128_maybe_prefixed" "strconv.parse_i128_of_base" "strconv.parse_i64_maybe_prefixed" "strconv.parse_i64_of_base" "strconv.parse_int" "strconv.parse_u128_maybe_prefixed" "strconv.parse_u128_of_base" "strconv.parse_u64_maybe_prefixed" "strconv.parse_u64_of_base" "strconv.parse_uint" "strconv.quote" "strconv.quote_rune" "strconv.round_shortest" "strconv.unquote_char" "strconv.unquote_string" "strconv.parse_i128" "strconv.parse_i64" "strconv.parse_u128" "strconv.parse_u64"))

(setq odin-decimal-types '( "Decimal"))

 (setq odin-decimal-proc '( "decimal.assign" "decimal.can_round_up" "decimal.decimal_to_string" "decimal.round" "decimal.round_down" "decimal.round_up" "decimal.rounded_integer" "decimal.shift" "decimal.shift_left" "decimal.shift_right" "decimal.trim"))

(setq odin-strings-types '( "Builder_Flush_Proc" "Builder" "Intern_Entry" "Intern" "Reader" "Split_Multi"))

 (setq odin-strings-proc '( "strings.builder_cap" "strings.builder_from_bytes" "strings.builder_from_slice" "strings.builder_len" "strings.builder_space" "strings.center_justify" "strings.centre_justify" "strings.clone_from_bytes" "strings.clone_from_cstring_bounded" "strings.clone_from_cstring" "strings.clone_from_ptr" "strings.clone_safe" "strings.clone_to_cstring" "strings.clone" "strings.compare" "strings.concatenate" "strings.concatenate_safe" "strings.contains_any" "strings.contains_rune" "strings.contains" "strings.count" "strings.cut" "strings.destroy_builder" "strings.equal_fold" "strings.expand_tabs" "strings.fields" "strings.fields_iterator" "strings.fields_proc" "strings.grow_builder" "strings.has_prefix" "strings.has_suffix" "strings.index" "strings.index_any" "strings.index_byte" "strings.index_proc" "strings.index_proc_with_state" "strings.index_rune" "strings.init_builder_len_cap" "strings.init_builder_len" "strings.init_builder_none" "strings.intern_destroy" "strings.intern_get" "strings.intern_get_cstring" "strings.intern_init" "strings.is_ascii_space" "strings.is_delimiter" "strings.is_in_cutset" "strings.is_null" "strings.is_separator" "strings.is_space" "strings.join_safe" "strings.join" "strings.last_index_proc" "strings.last_index" "strings.last_index_any" "strings.last_index_byte" "strings.last_index_proc_with_state" "strings.left_justify" "strings.levenshtein_distance" "strings.make_builder_len" "strings.make_builder_len_cap" "strings.make_builder_none" "strings.partition" "strings.pop_byte" "strings.pop_rune" "strings.ptr_from_string" "strings.reader_init" "strings.reader_length" "strings.reader_read_at" "strings.reader_read_byte" "strings.reader_read_rune" "strings.reader_read" "strings.reader_seek" "strings.reader_size" "strings.reader_to_stream" "strings.reader_unread_byte" "strings.reader_unread_rune" "strings.reader_write_to" "strings.remove" "strings.remove_all" "strings.repeat" "strings.replace_all" "strings.replace" "strings.reset_builder" "strings.reverse" "strings.right_justify" "strings.rune_count" "strings.scrub" "strings.split_after_iterator" "strings.split_after" "strings.split_after_n" "strings.split_by_byte_iterator" "strings.split_iterator" "strings.split_lines_after" "strings.split_lines" "strings.split_lines_after_iterator" "strings.split_lines_after_n" "strings.split" "strings.split_lines_iterator" "strings.split_lines_n" "strings.split_multi_init" "strings.split_multi_iterate" "strings.split_multi" "strings.split_n" "strings.string_case_iterator" "strings.string_from_nul_terminated_ptr" "strings.string_from_ptr" "strings.to_ada_case" "strings.to_byte_reader" "strings.to_camel_case" "strings.to_delimiter_case" "strings.to_kebab_case" "strings.to_lower" "strings.to_lower_camel_case" "strings.to_pascal_case" "strings.to_reader_at" "strings.to_reader" "strings.to_rune_reader" "strings.to_screaming_snake_case" "strings.to_snake_case" "strings.to_stream" "strings.to_string" "strings.to_upper_camel_case" "strings.to_upper" "strings.to_upper_kebab_case" "strings.to_upper_snake_case" "strings.to_valid_utf8" "strings.to_writer" "strings.trim_left" "strings.trim_left_null" "strings.trim_left_proc_with_state" "strings.trim_left_proc" "strings.trim_left_space" "strings.trim_null" "strings.trim_prefix" "strings.trim" "strings.trim_right" "strings.trim_right_null" "strings.trim_right_proc_with_state" "strings.trim_right_proc" "strings.trim_right_space" "strings.trim_space" "strings.trim_suffix" "strings.truncate_to_byte" "strings.truncate_to_rune" "strings.unsafe_string_to_cstring" "strings.write_byte" "strings.write_bytes" "strings.write_encoded_rune_builder" "strings.write_encoded_rune_writer" "strings.write_escaped_rune_builder" "strings.write_escaped_rune_writer" "strings.write_i64" "strings.write_int" "strings.write_quoted_rune_builder" "strings.write_quoted_rune" "strings.write_quoted_string_builder" "strings.write_quoted_string_writer" "strings.write_rune_builder" "strings.write_string_builder" "strings.write_string_writer" "strings.write_u64" "strings.write_uint" "strings.clone_from" "strings.init_builder" "strings.make_builder" "strings.write_encoded_rune" "strings.write_escaped_rune" "strings.write_quoted_string" "strings.write_string"))

(setq odin-sync-types '( "Atomic_Cond" "Atomic_Memory_Order" "Atomic_Mutex" "Atomic_Mutex_State" "Atomic_RW_Mutex" "Atomic_RW_Mutex_State" "Atomic_Recursive_Mutex" "Atomic_Sema" "Auto_Reset_Event" "Barrier" "Benaphore" "Cond" "Futex" "Mutex" "Once" "Parker" "RW_Mutex" "Recursive_Benaphore" "Recursive_Mutex" "Sema" "Ticket_Mutex" "Wait_Group"))

 (setq odin-sync-proc '( "sync.atomic_add" "sync.atomic_add_explicit" "sync.atomic_and" "sync.atomic_and_explicit" "sync.atomic_compare_exchange_strong_explicit" "sync.atomic_compare_exchange_strong" "sync.atomic_compare_exchange_weak" "sync.atomic_compare_exchange_weak_explicit" "sync.atomic_cond_broadcast" "sync.atomic_cond_signal" "sync.atomic_cond_wait_with_timeout" "sync.atomic_cond_wait" "sync.atomic_exchange_explicit" "sync.atomic_exchange" "sync.atomic_load" "sync.atomic_load_explicit" "sync.atomic_mutex_guard" "sync.atomic_mutex_lock" "sync.atomic_mutex_try_lock" "sync.atomic_mutex_unlock" "sync.atomic_nand" "sync.atomic_nand_explicit" "sync.atomic_or_explicit" "sync.atomic_or" "sync.atomic_recursive_mutex_guard" "sync.atomic_recursive_mutex_lock" "sync.atomic_recursive_mutex_try_lock" "sync.atomic_recursive_mutex_unlock" "sync.atomic_rw_mutex_guard" "sync.atomic_rw_mutex_lock" "sync.atomic_rw_mutex_shared_guard" "sync.atomic_rw_mutex_shared_lock" "sync.atomic_rw_mutex_shared_unlock" "sync.atomic_rw_mutex_try_lock" "sync.atomic_rw_mutex_try_shared_lock" "sync.atomic_rw_mutex_unlock" "sync.atomic_sema_post" "sync.atomic_sema_wait" "sync.atomic_sema_wait_with_timeout" "sync.atomic_signal_fence" "sync.atomic_store" "sync.atomic_store_explicit" "sync.atomic_sub_explicit" "sync.atomic_sub" "sync.atomic_thread_fence" "sync.atomic_xor" "sync.atomic_xor_explicit" "sync.auto_reset_event_signal" "sync.auto_reset_event_wait" "sync.barrier_init" "sync.barrier_wait" "sync.benaphore_guard" "sync.benaphore_lock" "sync.benaphore_try_lock" "sync.benaphore_unlock" "sync.cond_broadcast" "sync.cond_signal" "sync.cond_wait_with_timeout" "sync.cond_wait" "sync.cpu_relax" "sync.current_thread_id" "sync.futex_broadcast" "sync.futex_signal" "sync.futex_wait" "sync.futex_wait_with_timeout" "sync.mutex_guard" "sync.mutex_lock" "sync.mutex_try_lock" "sync.mutex_unlock" "sync.once_do" "sync.park" "sync.park_with_timeout" "sync.recursive_benaphore_guard" "sync.recursive_benaphore_lock" "sync.recursive_benaphore_try_lock" "sync.recursive_benaphore_unlock" "sync.recursive_mutex_guard" "sync.recursive_mutex_lock" "sync.recursive_mutex_try_lock" "sync.recursive_mutex_unlock" "sync.rw_mutex_guard" "sync.rw_mutex_lock" "sync.rw_mutex_shared_guard" "sync.rw_mutex_shared_lock" "sync.rw_mutex_shared_unlock" "sync.rw_mutex_try_lock" "sync.rw_mutex_try_shared_lock" "sync.rw_mutex_unlock" "sync.sema_post" "sync.sema_wait" "sync.sema_wait_with_timeout" "sync.ticket_mutex_guard" "sync.ticket_mutex_lock" "sync.ticket_mutex_unlock" "sync.unpark" "sync.wait_group_add" "sync.wait_group_done" "sync.wait_group_wait" "sync.wait_group_wait_with_timeout" "sync.broadcast" "sync.guard" "sync.lock" "sync." "sync.post" "sync.shared_guard" "sync.shared_lock" "sync.shared_unlock" "sync.signal" "sync.try_lock" "sync.try_shared_lock" "sync.unlock" "sync.wait" "sync.wait_with_timeout"))

(setq odin-testing-types '( "Internal_Cleanup" "Internal_Test" "Test_Signature" "T"))

 (setq odin-testing-proc '( "testing.cleanup" "testing.error" "testing.errorf" "testing.expect" "testing.expect_value" "testing.failed" "testing.fail" "testing.fail_now" "testing.log" "testing.logf" "testing.set_fail_timeout"))

(setq odin-i18n-types '( "Error" "Parse_Options" "Section" "Translation"))

 (setq odin-i18n-proc '( "i18n.destroy" "i18n.get_by_section" "i18n.get_by_slot_by_section" "i18n.get_by_slot_single_section" "i18n.get_single_section" "i18n.parse_mo_file" "i18n.parse_mo_from_bytes" "i18n.parse_qt_linguist_file" "i18n.parse_qt_linguist_from_bytes" "i18n.read_u16" "i18n.read_u32" "i18n.get" "i18n.get_by_slot" "i18n.parse_mo" "i18n.parse_qt"))

(setq odin-scanner-types '( "Position" "Scan_Flag" "Scan_Flags" "Scanner" "Whitespace"))

 (setq odin-scanner-proc '( "scanner.error" "scanner.errorf" "scanner.init" "scanner.next" "scanner.peek" "scanner.peek_token" "scanner.position_is_valid" "scanner.position_to_string" "scanner.position" "scanner.scan" "scanner.token_string" "scanner.token_text"))

(setq odin-thread-types '( "Pool" "Task_Proc" "Task" "Thread_Proc" "Thread" "Thread_Priority"))

 (setq odin-thread-proc '( "thread.create_and_start" "thread.create_and_start_with_data" "thread.create_and_start_with_poly_data2" "thread.create_and_start_with_poly_data3" "thread.create_and_start_with_poly_data4" "thread.create_and_start_with_poly_data" "thread.create" "thread.destroy" "thread.is_done" "thread.join" "thread.join_multiple" "thread.pool_add_task" "thread.pool_destroy" "thread.pool_do_work" "thread.pool_finish" "thread.pool_init" "thread.pool_is_empty" "thread.pool_join" "thread.pool_num_done" "thread.pool_num_in_processing" "thread.pool_num_outstanding" "thread.pool_num_waiting" "thread.pool_pop_done" "thread.pool_pop_waiting" "thread.pool_start" "thread.run_with_data" "thread.run_with_poly_data" "thread.run_with_poly_data2" "thread.run_with_poly_data3" "thread.run_with_poly_data4" "thread.run" "thread.start" "thread.terminate" "thread.yield"))

(setq odin-time-types '( "Benchmark_Error" "Benchmark_Options" "Duration" "Month" "Stopwatch" "Tick" "Time" "Weekday"))

 (setq odin-time-proc '( "time.SCOPED_TICK_DURATION" "time.accurate_sleep" "time.benchmark" "time.clock_from_duration" "time.clock_from_seconds" "time.clock_from_stopwatch" "time.clock_from_time" "time.date" "time.datetime_to_time" "time.day" "time.diff" "time.duration_hours" "time.duration_microseconds" "time.duration_milliseconds" "time.duration_minutes" "time.duration_nanoseconds" "time.duration_round" "time.duration_seconds" "time.duration_truncate" "time.month" "time.now" "time.read_cycle_counter" "time.since" "time.sleep" "time.stopwatch_duration" "time.stopwatch_reset" "time.stopwatch_start" "time.stopwatch_stop" "time.tick_diff" "time.tick_lap_time" "time.tick_now" "time.tick_since" "time.time_add" "time.time_to_unix" "time.time_to_unix_nano" "time.to_unix_nanoseconds" "time.to_unix_seconds" "time.unix" "time.year" "time.clock"))

(setq odin-unicode-proc '( "unicode.binary_search" "unicode.is_alpha" "unicode.is_combining" "unicode.is_control" "unicode.is_digit" "unicode.is_graphic" "unicode.is_letter" "unicode.is_lower" "unicode.is_number" "unicode.is_print" "unicode.is_punct" "unicode.is_space" "unicode.is_symbol" "unicode.is_title" "unicode.is_upper" "unicode.is_white_space" "unicode.to_lower" "unicode.to_title" "unicode.to_upper"))

(setq odin-utf16-proc '( "utf16.decode_surrogate_pair" "utf16.decode_to_utf8" "utf16.decode" "utf16.encode_surrogate_pair" "utf16.encode" "utf16.encode_string" "utf16.is_surrogate"))

(setq odin-utf8-types '( "Accept_Range"))

 (setq odin-utf8-proc '( "utf8.decode_last_rune" "utf8.decode_last_rune_in_string" "utf8.decode_rune_in_string" "utf8.decode_rune" "utf8.encode_rune" "utf8.full_rune" "utf8.full_rune_in_string" "utf8.rune_at_pos" "utf8.rune_at" "utf8.rune_count_in_string" "utf8.rune_count" "utf8.rune_offset" "utf8.rune_size" "utf8.rune_start" "utf8.rune_string_at_pos" "utf8.runes_to_string" "utf8.string_to_runes" "utf8.valid_rune" "utf8.valid_string"))

(setq odin-utf8/utf8string-types '( "String"))

 (setq odin-utf8/utf8string-proc '( "utf8/utf8string.at" "utf8/utf8string.init" "utf8/utf8string.is_ascii" "utf8/utf8string.len" "utf8/utf8string.slice" "utf8/utf8string.to_string"))

(setq odin-mode-highlights
      `(
	(":\s?\\w+\s?\)\\|:\s?\\w+\s?,\\|:\s?\\w+\s?=" . 'font-lock-type-face)
	(,(regexp-opt odin-keywords) . 'font-lock-function-name-face)
	(,(regexp-opt odin-bufio-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-bytes-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-c-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-frontend/preprocessor-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-frontend/tokenizer-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-libc-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-compress-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-gzip-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-shoco-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-zlib-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-bitarray-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-lru-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-priority_queue-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-queue-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-small_array-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-dynlib-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-base32-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-base64-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-csv-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-entitiy-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-hxa-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-json-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-variant-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-xml-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-fmt-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-hash-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-image-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-netpbm-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-png-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-tga-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-io-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-log-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-math-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-big-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-bits-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-fixed-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-linalg-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-linalg/glsl-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-linalg/hlsl-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-rand-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-mem-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-virtual-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-doc-format-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-os-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-filepath-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-slashpath-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-reflect-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-runtime-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-simd-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-slice-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-sort-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-strconv-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-decimal-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-strings-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-sync-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-testing-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-i18n-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-scanner-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-thread-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-time-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-unicode-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-utf16-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-utf8-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-utf/string-proc) . 'font-lock-function-name-face)
	(,(regexp-opt odin-operators) . 'font-lock-keyword-face)
	)
      )

(defvar odin-mode-syntax-table nil "syntax table for 'odin-mode'.")
(setq odin-mode-syntax-table
      (let ((synTable (make-syntax-table)))
	(modify-syntax-entry ?\/ ". 12b" synTable)
	(modify-syntax-entry ?\n "> b" synTable)
	synTable))

(defun odin-completion-at-point ()
  "This is the function to be used for the hook `completion-at-point-functions'."
  (interactive)
  (let* (
	 (bds (bounds-of-thing-at-point 'symbol))
	 (start (car bds))
	 (end (cdr bds)))
    (list start end (append
		     odin-keywords
		     odin-types
		     odin-bufio-types 
		     odin-bufio-proc
		     odin-bytes-types 
		     odin-bytes-proc
		     odin-c-types 
		     odin-c-proc
		     odin-frontend/preprocessor-types 
		     odin-frontend/preprocessor-proc
		     odin-frontend/tokenizer-types 
		     odin-frontend/tokenizer-proc
		     odin-libc-types 
		     odin-libc-proc
		     odin-compress-types 
		     odin-compress-proc
		     odin-gzip-types 
		     odin-gzip-proc
		     odin-shoco-types 
		     odin-shoco-proc
		     odin-zlib-types 
		     odin-zlib-proc
		     odin-bitarray-types 
		     odin-bitarray-proc
		     odin-lru-types 
		     odin-lru-proc
		     odin-priority_queue-types 
		     odin-priority_queue-proc
		     odin-queue-types 
		     odin-queue-proc
		     odin-small_array-types 
		     odin-small_array-proc
		     odin-dynlib-types 
		     odin-dynlib-proc
		     odin-base32-types 
		     odin-base32-proc
		     odin-base64-types 
		     odin-base64-proc
		     odin-csv-types 
		     odin-csv-proc
		     odin-entitiy-types 
		     odin-entitiy-proc
		     odin-hxa-types 
		     odin-hxa-proc
		     odin-json-types 
		     odin-json-proc
		     odin-variant-types 
		     odin-variant-proc
		     odin-xml-types 
		     odin-xml-proc
		     odin-fmt-types 
		     odin-fmt-proc
		     odin-hash-types 
		     odin-hash-proc
		     odin-image-types 
		     odin-image-proc
		     odin-netpbm-types 
		     odin-netpbm-proc
		     odin-png-types 
		     odin-png-proc
		     odin-tga-types 
		     odin-tga-proc
		     odin-io-types 
		     odin-io-proc
		     odin-log-types 
		     odin-log-proc
		     odin-math-types 
		     odin-math-proc
		     odin-big-types 
		     odin-big-proc
		     odin-bits-types 
		     odin-bits-proc
		     odin-fixed-types 
		     odin-fixed-proc
		     odin-linalg-types 
		     odin-linalg-proc
		     odin-linalg/glsl-types 
		     odin-linalg/glsl-proc
		     odin-linalg/hlsl-types 
		     odin-linalg/hlsl-proc
		     odin-rand-types 
		     odin-rand-proc
		     odin-mem-types 
		     odin-mem-proc
		     odin-virtual-types 
		     odin-virtual-proc
		     odin-doc-format-types 
		     odin-doc-format-proc
		     odin-os-types 
		     odin-os-proc
		     odin-filepath-types 
		     odin-filepath-proc
		     odin-slashpath-types 
		     odin-slashpath-proc
		     odin-reflect-types 
		     odin-reflect-proc
		     odin-runtime-types 
		     odin-runtime-proc
		     odin-simd-types 
		     odin-simd-proc
		     odin-slice-types 
		     odin-slice-proc
		     odin-sort-types 
		     odin-sort-proc
		     odin-strconv-types 
		     odin-strconv-proc
		     odin-decimal-types 
		     odin-decimal-proc
		     odin-strings-types 
		     odin-strings-proc
		     odin-sync-types 
		     odin-sync-proc
		     odin-testing-types 
		     odin-testing-proc
		     odin-i18n-types 
		     odin-i18n-proc
		     odin-scanner-types 
		     odin-scanner-proc
		     odin-thread-types 
		     odin-thread-proc
		     odin-time-types 
		     odin-time-proc
		     odin-unicode-types 
		     odin-unicode-proc
		     odin-utf16-types 
		     odin-utf16-proc
		     odin-utf/string-types 
		     odin-utf/string-proc
		    ) . nil )))

(define-derived-mode odin-mode prog-mode "Odin"
  "Major mode for Odin lang code."

  (setq-local comment-start "//")
  (setq-local comment-end "")

  (setq font-lock-defaults '(odin-mode-highlights))
  (add-hook 'completion-at-point-functions 'odin-completion-at-point nil
	    'local)
)

(add-to-list 'auto-mode-alist '("\\.odin\\'" . odin-mode))
(provide 'odin-mode)
